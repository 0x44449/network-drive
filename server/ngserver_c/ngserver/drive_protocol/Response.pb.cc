// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Response.proto

#include "Response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace drive_protocol {
namespace response {
constexpr CreateFileResponse::CreateFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct CreateFileResponseDefaultTypeInternal {
  constexpr CreateFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateFileResponseDefaultTypeInternal() {}
  union {
    CreateFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateFileResponseDefaultTypeInternal _CreateFileResponse_default_instance_;
constexpr CloseFileResponse::CloseFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct CloseFileResponseDefaultTypeInternal {
  constexpr CloseFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseFileResponseDefaultTypeInternal() {}
  union {
    CloseFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseFileResponseDefaultTypeInternal _CloseFileResponse_default_instance_;
constexpr ReadFileResponse::ReadFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(int64_t{0}){}
struct ReadFileResponseDefaultTypeInternal {
  constexpr ReadFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadFileResponseDefaultTypeInternal() {}
  union {
    ReadFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadFileResponseDefaultTypeInternal _ReadFileResponse_default_instance_;
constexpr WriteFileResponse::WriteFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct WriteFileResponseDefaultTypeInternal {
  constexpr WriteFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteFileResponseDefaultTypeInternal() {}
  union {
    WriteFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteFileResponseDefaultTypeInternal _WriteFileResponse_default_instance_;
constexpr FlushFileBufferResponse::FlushFileBufferResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct FlushFileBufferResponseDefaultTypeInternal {
  constexpr FlushFileBufferResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlushFileBufferResponseDefaultTypeInternal() {}
  union {
    FlushFileBufferResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlushFileBufferResponseDefaultTypeInternal _FlushFileBufferResponse_default_instance_;
constexpr GetFileInformationResponse::GetFileInformationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0})
  , file_attributes_(uint64_t{0u}){}
struct GetFileInformationResponseDefaultTypeInternal {
  constexpr GetFileInformationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileInformationResponseDefaultTypeInternal() {}
  union {
    GetFileInformationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileInformationResponseDefaultTypeInternal _GetFileInformationResponse_default_instance_;
constexpr DeleteFileResponse::DeleteFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct DeleteFileResponseDefaultTypeInternal {
  constexpr DeleteFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteFileResponseDefaultTypeInternal() {}
  union {
    DeleteFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteFileResponseDefaultTypeInternal _DeleteFileResponse_default_instance_;
constexpr DeleteDirectoryResponse::DeleteDirectoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct DeleteDirectoryResponseDefaultTypeInternal {
  constexpr DeleteDirectoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteDirectoryResponseDefaultTypeInternal() {}
  union {
    DeleteDirectoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteDirectoryResponseDefaultTypeInternal _DeleteDirectoryResponse_default_instance_;
constexpr MoveFileResponse::MoveFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct MoveFileResponseDefaultTypeInternal {
  constexpr MoveFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveFileResponseDefaultTypeInternal() {}
  union {
    MoveFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveFileResponseDefaultTypeInternal _MoveFileResponse_default_instance_;
constexpr LockFileResponse::LockFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct LockFileResponseDefaultTypeInternal {
  constexpr LockFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LockFileResponseDefaultTypeInternal() {}
  union {
    LockFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LockFileResponseDefaultTypeInternal _LockFileResponse_default_instance_;
constexpr SetEndOfFileResponse::SetEndOfFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct SetEndOfFileResponseDefaultTypeInternal {
  constexpr SetEndOfFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetEndOfFileResponseDefaultTypeInternal() {}
  union {
    SetEndOfFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetEndOfFileResponseDefaultTypeInternal _SetEndOfFileResponse_default_instance_;
constexpr SetAllocationSizeResponse::SetAllocationSizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct SetAllocationSizeResponseDefaultTypeInternal {
  constexpr SetAllocationSizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAllocationSizeResponseDefaultTypeInternal() {}
  union {
    SetAllocationSizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAllocationSizeResponseDefaultTypeInternal _SetAllocationSizeResponse_default_instance_;
constexpr SetFileAttributesResponse::SetFileAttributesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct SetFileAttributesResponseDefaultTypeInternal {
  constexpr SetFileAttributesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetFileAttributesResponseDefaultTypeInternal() {}
  union {
    SetFileAttributesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetFileAttributesResponseDefaultTypeInternal _SetFileAttributesResponse_default_instance_;
constexpr UnlockFileResponse::UnlockFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(int64_t{0}){}
struct UnlockFileResponseDefaultTypeInternal {
  constexpr UnlockFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnlockFileResponseDefaultTypeInternal() {}
  union {
    UnlockFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnlockFileResponseDefaultTypeInternal _UnlockFileResponse_default_instance_;
}  // namespace response
}  // namespace drive_protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Response_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Response_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Response_2eproto = nullptr;

const uint32_t TableStruct_Response_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::CreateFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::CreateFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::CloseFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::CloseFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::ReadFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::ReadFileResponse, status_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::ReadFileResponse, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::WriteFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::WriteFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::FlushFileBufferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::FlushFileBufferResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::GetFileInformationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::GetFileInformationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::GetFileInformationResponse, file_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::DeleteFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::DeleteFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::DeleteDirectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::DeleteDirectoryResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::MoveFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::MoveFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::LockFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::LockFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::SetEndOfFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::SetEndOfFileResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::SetAllocationSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::SetAllocationSizeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::SetFileAttributesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::SetFileAttributesResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::UnlockFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::response::UnlockFileResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::drive_protocol::response::CreateFileResponse)},
  { 7, -1, -1, sizeof(::drive_protocol::response::CloseFileResponse)},
  { 14, -1, -1, sizeof(::drive_protocol::response::ReadFileResponse)},
  { 22, -1, -1, sizeof(::drive_protocol::response::WriteFileResponse)},
  { 29, -1, -1, sizeof(::drive_protocol::response::FlushFileBufferResponse)},
  { 36, -1, -1, sizeof(::drive_protocol::response::GetFileInformationResponse)},
  { 44, -1, -1, sizeof(::drive_protocol::response::DeleteFileResponse)},
  { 51, -1, -1, sizeof(::drive_protocol::response::DeleteDirectoryResponse)},
  { 58, -1, -1, sizeof(::drive_protocol::response::MoveFileResponse)},
  { 65, -1, -1, sizeof(::drive_protocol::response::LockFileResponse)},
  { 72, -1, -1, sizeof(::drive_protocol::response::SetEndOfFileResponse)},
  { 79, -1, -1, sizeof(::drive_protocol::response::SetAllocationSizeResponse)},
  { 86, -1, -1, sizeof(::drive_protocol::response::SetFileAttributesResponse)},
  { 93, -1, -1, sizeof(::drive_protocol::response::UnlockFileResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_CreateFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_CloseFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_ReadFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_WriteFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_FlushFileBufferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_GetFileInformationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_DeleteFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_DeleteDirectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_MoveFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_LockFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_SetEndOfFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_SetAllocationSizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_SetFileAttributesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::response::_UnlockFileResponse_default_instance_),
};

const char descriptor_table_protodef_Response_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Response.proto\022\027drive_protocol.respons"
  "e\"$\n\022CreateFileResponse\022\016\n\006status\030\001 \001(\003\""
  "#\n\021CloseFileResponse\022\016\n\006status\030\001 \001(\003\"2\n\020"
  "ReadFileResponse\022\016\n\006status\030\001 \001(\003\022\016\n\006buff"
  "er\030\002 \001(\014\"#\n\021WriteFileResponse\022\016\n\006status\030"
  "\001 \001(\003\")\n\027FlushFileBufferResponse\022\016\n\006stat"
  "us\030\001 \001(\003\"E\n\032GetFileInformationResponse\022\016"
  "\n\006status\030\001 \001(\003\022\027\n\017file_attributes\030\002 \001(\004\""
  "$\n\022DeleteFileResponse\022\016\n\006status\030\001 \001(\003\")\n"
  "\027DeleteDirectoryResponse\022\016\n\006status\030\001 \001(\003"
  "\"\"\n\020MoveFileResponse\022\016\n\006status\030\001 \001(\003\"\"\n\020"
  "LockFileResponse\022\016\n\006status\030\001 \001(\003\"&\n\024SetE"
  "ndOfFileResponse\022\016\n\006status\030\001 \001(\003\"+\n\031SetA"
  "llocationSizeResponse\022\016\n\006status\030\001 \001(\003\"+\n"
  "\031SetFileAttributesResponse\022\016\n\006status\030\001 \001"
  "(\003\"$\n\022UnlockFileResponse\022\016\n\006status\030\001 \001(\003"
  "B\033\n\027drive_protocol.responseP\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Response_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Response_2eproto = {
  false, false, 677, descriptor_table_protodef_Response_2eproto, "Response.proto", 
  &descriptor_table_Response_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_Response_2eproto::offsets,
  file_level_metadata_Response_2eproto, file_level_enum_descriptors_Response_2eproto, file_level_service_descriptors_Response_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Response_2eproto_getter() {
  return &descriptor_table_Response_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Response_2eproto(&descriptor_table_Response_2eproto);
namespace drive_protocol {
namespace response {

// ===================================================================

class CreateFileResponse::_Internal {
 public:
};

CreateFileResponse::CreateFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.CreateFileResponse)
}
CreateFileResponse::CreateFileResponse(const CreateFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.CreateFileResponse)
}

inline void CreateFileResponse::SharedCtor() {
status_ = int64_t{0};
}

CreateFileResponse::~CreateFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.CreateFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateFileResponse::ArenaDtor(void* object) {
  CreateFileResponse* _this = reinterpret_cast< CreateFileResponse* >(object);
  (void)_this;
}
void CreateFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.CreateFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.CreateFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.CreateFileResponse)
  return target;
}

size_t CreateFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.CreateFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateFileResponse::GetClassData() const { return &_class_data_; }

void CreateFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateFileResponse *>(to)->MergeFrom(
      static_cast<const CreateFileResponse &>(from));
}


void CreateFileResponse::MergeFrom(const CreateFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.CreateFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateFileResponse::CopyFrom(const CreateFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.CreateFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFileResponse::IsInitialized() const {
  return true;
}

void CreateFileResponse::InternalSwap(CreateFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[0]);
}

// ===================================================================

class CloseFileResponse::_Internal {
 public:
};

CloseFileResponse::CloseFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.CloseFileResponse)
}
CloseFileResponse::CloseFileResponse(const CloseFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.CloseFileResponse)
}

inline void CloseFileResponse::SharedCtor() {
status_ = int64_t{0};
}

CloseFileResponse::~CloseFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.CloseFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseFileResponse::ArenaDtor(void* object) {
  CloseFileResponse* _this = reinterpret_cast< CloseFileResponse* >(object);
  (void)_this;
}
void CloseFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.CloseFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.CloseFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.CloseFileResponse)
  return target;
}

size_t CloseFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.CloseFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseFileResponse::GetClassData() const { return &_class_data_; }

void CloseFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseFileResponse *>(to)->MergeFrom(
      static_cast<const CloseFileResponse &>(from));
}


void CloseFileResponse::MergeFrom(const CloseFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.CloseFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseFileResponse::CopyFrom(const CloseFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.CloseFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFileResponse::IsInitialized() const {
  return true;
}

void CloseFileResponse::InternalSwap(CloseFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[1]);
}

// ===================================================================

class ReadFileResponse::_Internal {
 public:
};

ReadFileResponse::ReadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.ReadFileResponse)
}
ReadFileResponse::ReadFileResponse(const ReadFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.ReadFileResponse)
}

inline void ReadFileResponse::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = int64_t{0};
}

ReadFileResponse::~ReadFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.ReadFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadFileResponse::ArenaDtor(void* object) {
  ReadFileResponse* _this = reinterpret_cast< ReadFileResponse* >(object);
  (void)_this;
}
void ReadFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.ReadFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.ReadFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  // bytes buffer = 2;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.ReadFileResponse)
  return target;
}

size_t ReadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.ReadFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 2;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadFileResponse::GetClassData() const { return &_class_data_; }

void ReadFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadFileResponse *>(to)->MergeFrom(
      static_cast<const ReadFileResponse &>(from));
}


void ReadFileResponse::MergeFrom(const ReadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.ReadFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadFileResponse::CopyFrom(const ReadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.ReadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileResponse::IsInitialized() const {
  return true;
}

void ReadFileResponse::InternalSwap(ReadFileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[2]);
}

// ===================================================================

class WriteFileResponse::_Internal {
 public:
};

WriteFileResponse::WriteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.WriteFileResponse)
}
WriteFileResponse::WriteFileResponse(const WriteFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.WriteFileResponse)
}

inline void WriteFileResponse::SharedCtor() {
status_ = int64_t{0};
}

WriteFileResponse::~WriteFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.WriteFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteFileResponse::ArenaDtor(void* object) {
  WriteFileResponse* _this = reinterpret_cast< WriteFileResponse* >(object);
  (void)_this;
}
void WriteFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.WriteFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.WriteFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.WriteFileResponse)
  return target;
}

size_t WriteFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.WriteFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteFileResponse::GetClassData() const { return &_class_data_; }

void WriteFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteFileResponse *>(to)->MergeFrom(
      static_cast<const WriteFileResponse &>(from));
}


void WriteFileResponse::MergeFrom(const WriteFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.WriteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteFileResponse::CopyFrom(const WriteFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.WriteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFileResponse::IsInitialized() const {
  return true;
}

void WriteFileResponse::InternalSwap(WriteFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[3]);
}

// ===================================================================

class FlushFileBufferResponse::_Internal {
 public:
};

FlushFileBufferResponse::FlushFileBufferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.FlushFileBufferResponse)
}
FlushFileBufferResponse::FlushFileBufferResponse(const FlushFileBufferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.FlushFileBufferResponse)
}

inline void FlushFileBufferResponse::SharedCtor() {
status_ = int64_t{0};
}

FlushFileBufferResponse::~FlushFileBufferResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.FlushFileBufferResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlushFileBufferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlushFileBufferResponse::ArenaDtor(void* object) {
  FlushFileBufferResponse* _this = reinterpret_cast< FlushFileBufferResponse* >(object);
  (void)_this;
}
void FlushFileBufferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushFileBufferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlushFileBufferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.FlushFileBufferResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushFileBufferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushFileBufferResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.FlushFileBufferResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.FlushFileBufferResponse)
  return target;
}

size_t FlushFileBufferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.FlushFileBufferResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushFileBufferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlushFileBufferResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushFileBufferResponse::GetClassData() const { return &_class_data_; }

void FlushFileBufferResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlushFileBufferResponse *>(to)->MergeFrom(
      static_cast<const FlushFileBufferResponse &>(from));
}


void FlushFileBufferResponse::MergeFrom(const FlushFileBufferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.FlushFileBufferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushFileBufferResponse::CopyFrom(const FlushFileBufferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.FlushFileBufferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushFileBufferResponse::IsInitialized() const {
  return true;
}

void FlushFileBufferResponse::InternalSwap(FlushFileBufferResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushFileBufferResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[4]);
}

// ===================================================================

class GetFileInformationResponse::_Internal {
 public:
};

GetFileInformationResponse::GetFileInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.GetFileInformationResponse)
}
GetFileInformationResponse::GetFileInformationResponse(const GetFileInformationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_attributes_) -
    reinterpret_cast<char*>(&status_)) + sizeof(file_attributes_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.GetFileInformationResponse)
}

inline void GetFileInformationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_attributes_) -
    reinterpret_cast<char*>(&status_)) + sizeof(file_attributes_));
}

GetFileInformationResponse::~GetFileInformationResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.GetFileInformationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFileInformationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetFileInformationResponse::ArenaDtor(void* object) {
  GetFileInformationResponse* _this = reinterpret_cast< GetFileInformationResponse* >(object);
  (void)_this;
}
void GetFileInformationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileInformationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileInformationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.GetFileInformationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_attributes_) -
      reinterpret_cast<char*>(&status_)) + sizeof(file_attributes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileInformationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          file_attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileInformationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.GetFileInformationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  // uint64 file_attributes = 2;
  if (this->_internal_file_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_file_attributes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.GetFileInformationResponse)
  return target;
}

size_t GetFileInformationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.GetFileInformationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  // uint64 file_attributes = 2;
  if (this->_internal_file_attributes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_file_attributes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileInformationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFileInformationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileInformationResponse::GetClassData() const { return &_class_data_; }

void GetFileInformationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFileInformationResponse *>(to)->MergeFrom(
      static_cast<const GetFileInformationResponse &>(from));
}


void GetFileInformationResponse::MergeFrom(const GetFileInformationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.GetFileInformationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_file_attributes() != 0) {
    _internal_set_file_attributes(from._internal_file_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileInformationResponse::CopyFrom(const GetFileInformationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.GetFileInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInformationResponse::IsInitialized() const {
  return true;
}

void GetFileInformationResponse::InternalSwap(GetFileInformationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileInformationResponse, file_attributes_)
      + sizeof(GetFileInformationResponse::file_attributes_)
      - PROTOBUF_FIELD_OFFSET(GetFileInformationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileInformationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[5]);
}

// ===================================================================

class DeleteFileResponse::_Internal {
 public:
};

DeleteFileResponse::DeleteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.DeleteFileResponse)
}
DeleteFileResponse::DeleteFileResponse(const DeleteFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.DeleteFileResponse)
}

inline void DeleteFileResponse::SharedCtor() {
status_ = int64_t{0};
}

DeleteFileResponse::~DeleteFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.DeleteFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteFileResponse::ArenaDtor(void* object) {
  DeleteFileResponse* _this = reinterpret_cast< DeleteFileResponse* >(object);
  (void)_this;
}
void DeleteFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.DeleteFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.DeleteFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.DeleteFileResponse)
  return target;
}

size_t DeleteFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.DeleteFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteFileResponse::GetClassData() const { return &_class_data_; }

void DeleteFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteFileResponse *>(to)->MergeFrom(
      static_cast<const DeleteFileResponse &>(from));
}


void DeleteFileResponse::MergeFrom(const DeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.DeleteFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteFileResponse::CopyFrom(const DeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.DeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileResponse::IsInitialized() const {
  return true;
}

void DeleteFileResponse::InternalSwap(DeleteFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[6]);
}

// ===================================================================

class DeleteDirectoryResponse::_Internal {
 public:
};

DeleteDirectoryResponse::DeleteDirectoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.DeleteDirectoryResponse)
}
DeleteDirectoryResponse::DeleteDirectoryResponse(const DeleteDirectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.DeleteDirectoryResponse)
}

inline void DeleteDirectoryResponse::SharedCtor() {
status_ = int64_t{0};
}

DeleteDirectoryResponse::~DeleteDirectoryResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.DeleteDirectoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteDirectoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteDirectoryResponse::ArenaDtor(void* object) {
  DeleteDirectoryResponse* _this = reinterpret_cast< DeleteDirectoryResponse* >(object);
  (void)_this;
}
void DeleteDirectoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDirectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteDirectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.DeleteDirectoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDirectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDirectoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.DeleteDirectoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.DeleteDirectoryResponse)
  return target;
}

size_t DeleteDirectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.DeleteDirectoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDirectoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteDirectoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDirectoryResponse::GetClassData() const { return &_class_data_; }

void DeleteDirectoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteDirectoryResponse *>(to)->MergeFrom(
      static_cast<const DeleteDirectoryResponse &>(from));
}


void DeleteDirectoryResponse::MergeFrom(const DeleteDirectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.DeleteDirectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDirectoryResponse::CopyFrom(const DeleteDirectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.DeleteDirectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDirectoryResponse::IsInitialized() const {
  return true;
}

void DeleteDirectoryResponse::InternalSwap(DeleteDirectoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDirectoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[7]);
}

// ===================================================================

class MoveFileResponse::_Internal {
 public:
};

MoveFileResponse::MoveFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.MoveFileResponse)
}
MoveFileResponse::MoveFileResponse(const MoveFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.MoveFileResponse)
}

inline void MoveFileResponse::SharedCtor() {
status_ = int64_t{0};
}

MoveFileResponse::~MoveFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.MoveFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveFileResponse::ArenaDtor(void* object) {
  MoveFileResponse* _this = reinterpret_cast< MoveFileResponse* >(object);
  (void)_this;
}
void MoveFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.MoveFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.MoveFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.MoveFileResponse)
  return target;
}

size_t MoveFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.MoveFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveFileResponse::GetClassData() const { return &_class_data_; }

void MoveFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveFileResponse *>(to)->MergeFrom(
      static_cast<const MoveFileResponse &>(from));
}


void MoveFileResponse::MergeFrom(const MoveFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.MoveFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveFileResponse::CopyFrom(const MoveFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.MoveFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFileResponse::IsInitialized() const {
  return true;
}

void MoveFileResponse::InternalSwap(MoveFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[8]);
}

// ===================================================================

class LockFileResponse::_Internal {
 public:
};

LockFileResponse::LockFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.LockFileResponse)
}
LockFileResponse::LockFileResponse(const LockFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.LockFileResponse)
}

inline void LockFileResponse::SharedCtor() {
status_ = int64_t{0};
}

LockFileResponse::~LockFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.LockFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LockFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LockFileResponse::ArenaDtor(void* object) {
  LockFileResponse* _this = reinterpret_cast< LockFileResponse* >(object);
  (void)_this;
}
void LockFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LockFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.LockFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LockFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.LockFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.LockFileResponse)
  return target;
}

size_t LockFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.LockFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LockFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockFileResponse::GetClassData() const { return &_class_data_; }

void LockFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LockFileResponse *>(to)->MergeFrom(
      static_cast<const LockFileResponse &>(from));
}


void LockFileResponse::MergeFrom(const LockFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.LockFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LockFileResponse::CopyFrom(const LockFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.LockFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockFileResponse::IsInitialized() const {
  return true;
}

void LockFileResponse::InternalSwap(LockFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[9]);
}

// ===================================================================

class SetEndOfFileResponse::_Internal {
 public:
};

SetEndOfFileResponse::SetEndOfFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.SetEndOfFileResponse)
}
SetEndOfFileResponse::SetEndOfFileResponse(const SetEndOfFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.SetEndOfFileResponse)
}

inline void SetEndOfFileResponse::SharedCtor() {
status_ = int64_t{0};
}

SetEndOfFileResponse::~SetEndOfFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.SetEndOfFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetEndOfFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetEndOfFileResponse::ArenaDtor(void* object) {
  SetEndOfFileResponse* _this = reinterpret_cast< SetEndOfFileResponse* >(object);
  (void)_this;
}
void SetEndOfFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetEndOfFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetEndOfFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.SetEndOfFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEndOfFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEndOfFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.SetEndOfFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.SetEndOfFileResponse)
  return target;
}

size_t SetEndOfFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.SetEndOfFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEndOfFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetEndOfFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEndOfFileResponse::GetClassData() const { return &_class_data_; }

void SetEndOfFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetEndOfFileResponse *>(to)->MergeFrom(
      static_cast<const SetEndOfFileResponse &>(from));
}


void SetEndOfFileResponse::MergeFrom(const SetEndOfFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.SetEndOfFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEndOfFileResponse::CopyFrom(const SetEndOfFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.SetEndOfFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndOfFileResponse::IsInitialized() const {
  return true;
}

void SetEndOfFileResponse::InternalSwap(SetEndOfFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndOfFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[10]);
}

// ===================================================================

class SetAllocationSizeResponse::_Internal {
 public:
};

SetAllocationSizeResponse::SetAllocationSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.SetAllocationSizeResponse)
}
SetAllocationSizeResponse::SetAllocationSizeResponse(const SetAllocationSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.SetAllocationSizeResponse)
}

inline void SetAllocationSizeResponse::SharedCtor() {
status_ = int64_t{0};
}

SetAllocationSizeResponse::~SetAllocationSizeResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.SetAllocationSizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAllocationSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetAllocationSizeResponse::ArenaDtor(void* object) {
  SetAllocationSizeResponse* _this = reinterpret_cast< SetAllocationSizeResponse* >(object);
  (void)_this;
}
void SetAllocationSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAllocationSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAllocationSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.SetAllocationSizeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAllocationSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAllocationSizeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.SetAllocationSizeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.SetAllocationSizeResponse)
  return target;
}

size_t SetAllocationSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.SetAllocationSizeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAllocationSizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAllocationSizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAllocationSizeResponse::GetClassData() const { return &_class_data_; }

void SetAllocationSizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAllocationSizeResponse *>(to)->MergeFrom(
      static_cast<const SetAllocationSizeResponse &>(from));
}


void SetAllocationSizeResponse::MergeFrom(const SetAllocationSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.SetAllocationSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAllocationSizeResponse::CopyFrom(const SetAllocationSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.SetAllocationSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllocationSizeResponse::IsInitialized() const {
  return true;
}

void SetAllocationSizeResponse::InternalSwap(SetAllocationSizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAllocationSizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[11]);
}

// ===================================================================

class SetFileAttributesResponse::_Internal {
 public:
};

SetFileAttributesResponse::SetFileAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.SetFileAttributesResponse)
}
SetFileAttributesResponse::SetFileAttributesResponse(const SetFileAttributesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.SetFileAttributesResponse)
}

inline void SetFileAttributesResponse::SharedCtor() {
status_ = int64_t{0};
}

SetFileAttributesResponse::~SetFileAttributesResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.SetFileAttributesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetFileAttributesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetFileAttributesResponse::ArenaDtor(void* object) {
  SetFileAttributesResponse* _this = reinterpret_cast< SetFileAttributesResponse* >(object);
  (void)_this;
}
void SetFileAttributesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetFileAttributesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetFileAttributesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.SetFileAttributesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetFileAttributesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetFileAttributesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.SetFileAttributesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.SetFileAttributesResponse)
  return target;
}

size_t SetFileAttributesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.SetFileAttributesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetFileAttributesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetFileAttributesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetFileAttributesResponse::GetClassData() const { return &_class_data_; }

void SetFileAttributesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetFileAttributesResponse *>(to)->MergeFrom(
      static_cast<const SetFileAttributesResponse &>(from));
}


void SetFileAttributesResponse::MergeFrom(const SetFileAttributesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.SetFileAttributesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetFileAttributesResponse::CopyFrom(const SetFileAttributesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.SetFileAttributesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFileAttributesResponse::IsInitialized() const {
  return true;
}

void SetFileAttributesResponse::InternalSwap(SetFileAttributesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetFileAttributesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[12]);
}

// ===================================================================

class UnlockFileResponse::_Internal {
 public:
};

UnlockFileResponse::UnlockFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.response.UnlockFileResponse)
}
UnlockFileResponse::UnlockFileResponse(const UnlockFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.response.UnlockFileResponse)
}

inline void UnlockFileResponse::SharedCtor() {
status_ = int64_t{0};
}

UnlockFileResponse::~UnlockFileResponse() {
  // @@protoc_insertion_point(destructor:drive_protocol.response.UnlockFileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnlockFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnlockFileResponse::ArenaDtor(void* object) {
  UnlockFileResponse* _this = reinterpret_cast< UnlockFileResponse* >(object);
  (void)_this;
}
void UnlockFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlockFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnlockFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.response.UnlockFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlockFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnlockFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.response.UnlockFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.response.UnlockFileResponse)
  return target;
}

size_t UnlockFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.response.UnlockFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlockFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnlockFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlockFileResponse::GetClassData() const { return &_class_data_; }

void UnlockFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnlockFileResponse *>(to)->MergeFrom(
      static_cast<const UnlockFileResponse &>(from));
}


void UnlockFileResponse::MergeFrom(const UnlockFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.response.UnlockFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnlockFileResponse::CopyFrom(const UnlockFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.response.UnlockFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockFileResponse::IsInitialized() const {
  return true;
}

void UnlockFileResponse::InternalSwap(UnlockFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockFileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
      file_level_metadata_Response_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace response
}  // namespace drive_protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::drive_protocol::response::CreateFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::CreateFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::CreateFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::CloseFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::CloseFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::CloseFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::ReadFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::ReadFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::ReadFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::WriteFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::WriteFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::WriteFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::FlushFileBufferResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::FlushFileBufferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::FlushFileBufferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::GetFileInformationResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::GetFileInformationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::GetFileInformationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::DeleteFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::DeleteFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::DeleteFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::DeleteDirectoryResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::DeleteDirectoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::DeleteDirectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::MoveFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::MoveFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::MoveFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::LockFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::LockFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::LockFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::SetEndOfFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::SetEndOfFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::SetEndOfFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::SetAllocationSizeResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::SetAllocationSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::SetAllocationSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::SetFileAttributesResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::SetFileAttributesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::SetFileAttributesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::response::UnlockFileResponse* Arena::CreateMaybeMessage< ::drive_protocol::response::UnlockFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::response::UnlockFileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
