// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DriveProcedure.proto
#ifndef GRPC_DriveProcedure_2eproto__INCLUDED
#define GRPC_DriveProcedure_2eproto__INCLUDED

#include "DriveProcedure.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace drive_protocol {

class DriveProcedure final {
 public:
  static constexpr char const* service_full_name() {
    return "drive_protocol.DriveProcedure";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::drive_protocol::response::CreateFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CreateFileResponse>> AsyncCreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CreateFileResponse>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CreateFileResponse>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CreateFileResponse>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::drive_protocol::response::CloseFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CloseFileResponse>> AsyncCloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CloseFileResponse>>(AsyncCloseFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CloseFileResponse>> PrepareAsyncCloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CloseFileResponse>>(PrepareAsyncCloseFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::drive_protocol::response::ReadFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::drive_protocol::response::WriteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::WriteFileResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::WriteFileResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::WriteFileResponse>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::WriteFileResponse>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::drive_protocol::response::FlushFileBufferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::FlushFileBufferResponse>> AsyncFlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::FlushFileBufferResponse>>(AsyncFlushFileBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::FlushFileBufferResponse>> PrepareAsyncFlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::FlushFileBufferResponse>>(PrepareAsyncFlushFileBufferRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::drive_protocol::response::GetFileInformationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::GetFileInformationResponse>> AsyncGetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::GetFileInformationResponse>>(AsyncGetFileInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::GetFileInformationResponse>> PrepareAsyncGetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::GetFileInformationResponse>>(PrepareAsyncGetFileInformationRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::drive_protocol::response::DeleteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::drive_protocol::response::DeleteDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteDirectoryResponse>> AsyncDeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteDirectoryResponse>>(AsyncDeleteDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteDirectoryResponse>> PrepareAsyncDeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteDirectoryResponse>>(PrepareAsyncDeleteDirectoryRaw(context, request, cq));
    }
    virtual ::grpc::Status MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::drive_protocol::response::MoveFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::MoveFileResponse>> AsyncMoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::MoveFileResponse>>(AsyncMoveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::MoveFileResponse>> PrepareAsyncMoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::MoveFileResponse>>(PrepareAsyncMoveFileRaw(context, request, cq));
    }
    virtual ::grpc::Status LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::drive_protocol::response::LockFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::LockFileResponse>> AsyncLockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::LockFileResponse>>(AsyncLockFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::LockFileResponse>> PrepareAsyncLockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::LockFileResponse>>(PrepareAsyncLockFileRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::drive_protocol::response::SetEndOfFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetEndOfFileResponse>> AsyncSetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetEndOfFileResponse>>(AsyncSetEndOfFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetEndOfFileResponse>> PrepareAsyncSetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetEndOfFileResponse>>(PrepareAsyncSetEndOfFileRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::drive_protocol::response::SetAllocationSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetAllocationSizeResponse>> AsyncSetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetAllocationSizeResponse>>(AsyncSetAllocationSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetAllocationSizeResponse>> PrepareAsyncSetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetAllocationSizeResponse>>(PrepareAsyncSetAllocationSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::drive_protocol::response::SetFileAttributesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetFileAttributesResponse>> AsyncSetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetFileAttributesResponse>>(AsyncSetFileAttributesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetFileAttributesResponse>> PrepareAsyncSetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetFileAttributesResponse>>(PrepareAsyncSetFileAttributesRaw(context, request, cq));
    }
    virtual ::grpc::Status UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::drive_protocol::response::UnlockFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::UnlockFileResponse>> AsyncUnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::UnlockFileResponse>>(AsyncUnlockFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::UnlockFileResponse>> PrepareAsyncUnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::UnlockFileResponse>>(PrepareAsyncUnlockFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CreateFileResponse>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CreateFileResponse>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CloseFileResponse>* AsyncCloseFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::CloseFileResponse>* PrepareAsyncCloseFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::WriteFileResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::WriteFileResponse>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::FlushFileBufferResponse>* AsyncFlushFileBufferRaw(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::FlushFileBufferResponse>* PrepareAsyncFlushFileBufferRaw(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::GetFileInformationResponse>* AsyncGetFileInformationRaw(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::GetFileInformationResponse>* PrepareAsyncGetFileInformationRaw(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteDirectoryResponse>* AsyncDeleteDirectoryRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::DeleteDirectoryResponse>* PrepareAsyncDeleteDirectoryRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::MoveFileResponse>* AsyncMoveFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::MoveFileResponse>* PrepareAsyncMoveFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::LockFileResponse>* AsyncLockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::LockFileResponse>* PrepareAsyncLockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetEndOfFileResponse>* AsyncSetEndOfFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetEndOfFileResponse>* PrepareAsyncSetEndOfFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetAllocationSizeResponse>* AsyncSetAllocationSizeRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetAllocationSizeResponse>* PrepareAsyncSetAllocationSizeRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetFileAttributesResponse>* AsyncSetFileAttributesRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::SetFileAttributesResponse>* PrepareAsyncSetFileAttributesRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::UnlockFileResponse>* AsyncUnlockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::drive_protocol::response::UnlockFileResponse>* PrepareAsyncUnlockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::drive_protocol::response::CreateFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>> AsyncCreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    ::grpc::Status CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::drive_protocol::response::CloseFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>> AsyncCloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>>(AsyncCloseFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>> PrepareAsyncCloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>>(PrepareAsyncCloseFileRaw(context, request, cq));
    }
    ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::drive_protocol::response::ReadFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::drive_protocol::response::WriteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    ::grpc::Status FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::drive_protocol::response::FlushFileBufferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>> AsyncFlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>>(AsyncFlushFileBufferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>> PrepareAsyncFlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>>(PrepareAsyncFlushFileBufferRaw(context, request, cq));
    }
    ::grpc::Status GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::drive_protocol::response::GetFileInformationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>> AsyncGetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>>(AsyncGetFileInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>> PrepareAsyncGetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>>(PrepareAsyncGetFileInformationRaw(context, request, cq));
    }
    ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::drive_protocol::response::DeleteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    ::grpc::Status DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::drive_protocol::response::DeleteDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>> AsyncDeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>>(AsyncDeleteDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>> PrepareAsyncDeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>>(PrepareAsyncDeleteDirectoryRaw(context, request, cq));
    }
    ::grpc::Status MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::drive_protocol::response::MoveFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>> AsyncMoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>>(AsyncMoveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>> PrepareAsyncMoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>>(PrepareAsyncMoveFileRaw(context, request, cq));
    }
    ::grpc::Status LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::drive_protocol::response::LockFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>> AsyncLockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>>(AsyncLockFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>> PrepareAsyncLockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>>(PrepareAsyncLockFileRaw(context, request, cq));
    }
    ::grpc::Status SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::drive_protocol::response::SetEndOfFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>> AsyncSetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>>(AsyncSetEndOfFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>> PrepareAsyncSetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>>(PrepareAsyncSetEndOfFileRaw(context, request, cq));
    }
    ::grpc::Status SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::drive_protocol::response::SetAllocationSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>> AsyncSetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>>(AsyncSetAllocationSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>> PrepareAsyncSetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>>(PrepareAsyncSetAllocationSizeRaw(context, request, cq));
    }
    ::grpc::Status SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::drive_protocol::response::SetFileAttributesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>> AsyncSetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>>(AsyncSetFileAttributesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>> PrepareAsyncSetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>>(PrepareAsyncSetFileAttributesRaw(context, request, cq));
    }
    ::grpc::Status UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::drive_protocol::response::UnlockFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>> AsyncUnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>>(AsyncUnlockFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>> PrepareAsyncUnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>>(PrepareAsyncUnlockFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response, std::function<void(::grpc::Status)>) override;
      void FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response, std::function<void(::grpc::Status)>) override;
      void LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response, std::function<void(::grpc::Status)>) override;
      void SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response, std::function<void(::grpc::Status)>) override;
      void UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>* AsyncCloseFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>* PrepareAsyncCloseFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>* AsyncFlushFileBufferRaw(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>* PrepareAsyncFlushFileBufferRaw(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>* AsyncGetFileInformationRaw(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>* PrepareAsyncGetFileInformationRaw(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>* AsyncDeleteDirectoryRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>* PrepareAsyncDeleteDirectoryRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>* AsyncMoveFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>* PrepareAsyncMoveFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>* AsyncLockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>* PrepareAsyncLockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>* AsyncSetEndOfFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>* PrepareAsyncSetEndOfFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>* AsyncSetAllocationSizeRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>* PrepareAsyncSetAllocationSizeRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>* AsyncSetFileAttributesRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>* PrepareAsyncSetFileAttributesRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>* AsyncUnlockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>* PrepareAsyncUnlockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFile_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_FlushFileBuffer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileInformation_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveFile_;
    const ::grpc::internal::RpcMethod rpcmethod_LockFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEndOfFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAllocationSize_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFileAttributes_;
    const ::grpc::internal::RpcMethod rpcmethod_UnlockFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateFile(::grpc::ServerContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response);
    virtual ::grpc::Status CloseFile(::grpc::ServerContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response);
    virtual ::grpc::Status ReadFile(::grpc::ServerContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response);
    virtual ::grpc::Status WriteFile(::grpc::ServerContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response);
    virtual ::grpc::Status FlushFileBuffer(::grpc::ServerContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response);
    virtual ::grpc::Status GetFileInformation(::grpc::ServerContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response);
    virtual ::grpc::Status DeleteFile(::grpc::ServerContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response);
    virtual ::grpc::Status DeleteDirectory(::grpc::ServerContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response);
    virtual ::grpc::Status MoveFile(::grpc::ServerContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response);
    virtual ::grpc::Status LockFile(::grpc::ServerContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response);
    virtual ::grpc::Status SetEndOfFile(::grpc::ServerContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response);
    virtual ::grpc::Status SetAllocationSize(::grpc::ServerContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response);
    virtual ::grpc::Status SetFileAttributes(::grpc::ServerContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response);
    virtual ::grpc::Status UnlockFile(::grpc::ServerContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::drive_protocol::request::CreateFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::CreateFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseFile(::grpc::ServerContext* context, ::drive_protocol::request::CloseFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::CloseFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::drive_protocol::request::ReadFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::ReadFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::drive_protocol::request::WriteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::WriteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FlushFileBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FlushFileBuffer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FlushFileBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushFileBuffer(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushFileBuffer(::grpc::ServerContext* context, ::drive_protocol::request::FlushFileBufferRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::FlushFileBufferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFileInformation() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFileInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileInformation(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileInformation(::grpc::ServerContext* context, ::drive_protocol::request::GetFileInformationRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::GetFileInformationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::drive_protocol::request::DeleteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::DeleteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDirectory() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirectory(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDirectory(::grpc::ServerContext* context, ::drive_protocol::request::DeleteDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::DeleteDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveFile() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_MoveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveFile(::grpc::ServerContext* context, ::drive_protocol::request::MoveFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::MoveFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LockFile() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_LockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockFile(::grpc::ServerContext* context, ::drive_protocol::request::LockFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::LockFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEndOfFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEndOfFile() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetEndOfFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEndOfFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEndOfFile(::grpc::ServerContext* context, ::drive_protocol::request::SetEndOfFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::SetEndOfFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAllocationSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAllocationSize() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetAllocationSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllocationSize(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllocationSize(::grpc::ServerContext* context, ::drive_protocol::request::SetAllocationSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::SetAllocationSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFileAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFileAttributes() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetFileAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFileAttributes(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFileAttributes(::grpc::ServerContext* context, ::drive_protocol::request::SetFileAttributesRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::SetFileAttributesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnlockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnlockFile() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_UnlockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlockFile(::grpc::ServerContext* context, ::drive_protocol::request::UnlockFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::drive_protocol::response::UnlockFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateFile<WithAsyncMethod_CloseFile<WithAsyncMethod_ReadFile<WithAsyncMethod_WriteFile<WithAsyncMethod_FlushFileBuffer<WithAsyncMethod_GetFileInformation<WithAsyncMethod_DeleteFile<WithAsyncMethod_DeleteDirectory<WithAsyncMethod_MoveFile<WithAsyncMethod_LockFile<WithAsyncMethod_SetEndOfFile<WithAsyncMethod_SetAllocationSize<WithAsyncMethod_SetFileAttributes<WithAsyncMethod_UnlockFile<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response) { return this->CreateFile(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response) { return this->CloseFile(context, request, response); }));}
    void SetMessageAllocatorFor_CloseFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response) { return this->ReadFile(context, request, response); }));}
    void SetMessageAllocatorFor_ReadFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response) { return this->WriteFile(context, request, response); }));}
    void SetMessageAllocatorFor_WriteFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FlushFileBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FlushFileBuffer() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response) { return this->FlushFileBuffer(context, request, response); }));}
    void SetMessageAllocatorFor_FlushFileBuffer(
        ::grpc::MessageAllocator< ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FlushFileBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushFileBuffer(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FlushFileBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFileInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFileInformation() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response) { return this->GetFileInformation(context, request, response); }));}
    void SetMessageAllocatorFor_GetFileInformation(
        ::grpc::MessageAllocator< ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFileInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileInformation(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response) { return this->DeleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDirectory() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response) { return this->DeleteDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDirectory(
        ::grpc::MessageAllocator< ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirectory(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveFile() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response) { return this->MoveFile(context, request, response); }));}
    void SetMessageAllocatorFor_MoveFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LockFile() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response) { return this->LockFile(context, request, response); }));}
    void SetMessageAllocatorFor_LockFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LockFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetEndOfFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetEndOfFile() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response) { return this->SetEndOfFile(context, request, response); }));}
    void SetMessageAllocatorFor_SetEndOfFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetEndOfFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEndOfFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEndOfFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAllocationSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAllocationSize() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response) { return this->SetAllocationSize(context, request, response); }));}
    void SetMessageAllocatorFor_SetAllocationSize(
        ::grpc::MessageAllocator< ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAllocationSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllocationSize(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAllocationSize(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetFileAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetFileAttributes() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response) { return this->SetFileAttributes(context, request, response); }));}
    void SetMessageAllocatorFor_SetFileAttributes(
        ::grpc::MessageAllocator< ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetFileAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFileAttributes(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFileAttributes(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnlockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnlockFile() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response) { return this->UnlockFile(context, request, response); }));}
    void SetMessageAllocatorFor_UnlockFile(
        ::grpc::MessageAllocator< ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnlockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnlockFile(
      ::grpc::CallbackServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateFile<WithCallbackMethod_CloseFile<WithCallbackMethod_ReadFile<WithCallbackMethod_WriteFile<WithCallbackMethod_FlushFileBuffer<WithCallbackMethod_GetFileInformation<WithCallbackMethod_DeleteFile<WithCallbackMethod_DeleteDirectory<WithCallbackMethod_MoveFile<WithCallbackMethod_LockFile<WithCallbackMethod_SetEndOfFile<WithCallbackMethod_SetAllocationSize<WithCallbackMethod_SetFileAttributes<WithCallbackMethod_UnlockFile<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FlushFileBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FlushFileBuffer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FlushFileBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushFileBuffer(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFileInformation() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFileInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileInformation(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDirectory() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirectory(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveFile() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_MoveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LockFile() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_LockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEndOfFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEndOfFile() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetEndOfFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEndOfFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAllocationSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAllocationSize() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetAllocationSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllocationSize(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFileAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFileAttributes() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetFileAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFileAttributes(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnlockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnlockFile() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_UnlockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FlushFileBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FlushFileBuffer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_FlushFileBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushFileBuffer(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlushFileBuffer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFileInformation() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFileInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileInformation(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDirectory() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirectory(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveFile() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_MoveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LockFile() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_LockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEndOfFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEndOfFile() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetEndOfFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEndOfFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEndOfFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAllocationSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAllocationSize() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetAllocationSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllocationSize(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllocationSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFileAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFileAttributes() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetFileAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFileAttributes(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFileAttributes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnlockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnlockFile() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_UnlockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlockFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FlushFileBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FlushFileBuffer() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FlushFileBuffer(context, request, response); }));
    }
    ~WithRawCallbackMethod_FlushFileBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlushFileBuffer(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FlushFileBuffer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFileInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFileInformation() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFileInformation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFileInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileInformation(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDirectory() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirectory(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveFile() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LockFile() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LockFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_LockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LockFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetEndOfFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetEndOfFile() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEndOfFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetEndOfFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEndOfFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEndOfFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAllocationSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAllocationSize() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAllocationSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAllocationSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllocationSize(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAllocationSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetFileAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetFileAttributes() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFileAttributes(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetFileAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFileAttributes(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFileAttributes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnlockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnlockFile() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnlockFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnlockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnlockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnlockFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse>* streamer) {
                       return this->StreamedCreateFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CreateFileRequest* /*request*/, ::drive_protocol::response::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::CreateFileRequest,::drive_protocol::response::CreateFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse>* streamer) {
                       return this->StreamedCloseFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::CloseFileRequest* /*request*/, ::drive_protocol::response::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::CloseFileRequest,::drive_protocol::response::CloseFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse>* streamer) {
                       return this->StreamedReadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::ReadFileRequest* /*request*/, ::drive_protocol::response::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::ReadFileRequest,::drive_protocol::response::ReadFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse>* streamer) {
                       return this->StreamedWriteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::WriteFileRequest* /*request*/, ::drive_protocol::response::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::WriteFileRequest,::drive_protocol::response::WriteFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FlushFileBuffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FlushFileBuffer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse>* streamer) {
                       return this->StreamedFlushFileBuffer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FlushFileBuffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FlushFileBuffer(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::FlushFileBufferRequest* /*request*/, ::drive_protocol::response::FlushFileBufferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlushFileBuffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::FlushFileBufferRequest,::drive_protocol::response::FlushFileBufferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFileInformation() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse>* streamer) {
                       return this->StreamedGetFileInformation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFileInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileInformation(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::GetFileInformationRequest* /*request*/, ::drive_protocol::response::GetFileInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::GetFileInformationRequest,::drive_protocol::response::GetFileInformationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse>* streamer) {
                       return this->StreamedDeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteFileRequest* /*request*/, ::drive_protocol::response::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::DeleteFileRequest,::drive_protocol::response::DeleteFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDirectory() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse>* streamer) {
                       return this->StreamedDeleteDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDirectory(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::DeleteDirectoryRequest* /*request*/, ::drive_protocol::response::DeleteDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::DeleteDirectoryRequest,::drive_protocol::response::DeleteDirectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveFile() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse>* streamer) {
                       return this->StreamedMoveFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::MoveFileRequest* /*request*/, ::drive_protocol::response::MoveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::MoveFileRequest,::drive_protocol::response::MoveFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LockFile() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse>* streamer) {
                       return this->StreamedLockFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::LockFileRequest* /*request*/, ::drive_protocol::response::LockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLockFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::LockFileRequest,::drive_protocol::response::LockFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEndOfFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEndOfFile() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse>* streamer) {
                       return this->StreamedSetEndOfFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEndOfFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEndOfFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetEndOfFileRequest* /*request*/, ::drive_protocol::response::SetEndOfFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEndOfFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::SetEndOfFileRequest,::drive_protocol::response::SetEndOfFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAllocationSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAllocationSize() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse>* streamer) {
                       return this->StreamedSetAllocationSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAllocationSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAllocationSize(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetAllocationSizeRequest* /*request*/, ::drive_protocol::response::SetAllocationSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAllocationSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::SetAllocationSizeRequest,::drive_protocol::response::SetAllocationSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFileAttributes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFileAttributes() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse>* streamer) {
                       return this->StreamedSetFileAttributes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFileAttributes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFileAttributes(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::SetFileAttributesRequest* /*request*/, ::drive_protocol::response::SetFileAttributesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFileAttributes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::SetFileAttributesRequest,::drive_protocol::response::SetFileAttributesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnlockFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnlockFile() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse>* streamer) {
                       return this->StreamedUnlockFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnlockFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnlockFile(::grpc::ServerContext* /*context*/, const ::drive_protocol::request::UnlockFileRequest* /*request*/, ::drive_protocol::response::UnlockFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlockFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::drive_protocol::request::UnlockFileRequest,::drive_protocol::response::UnlockFileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_CloseFile<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_FlushFileBuffer<WithStreamedUnaryMethod_GetFileInformation<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_DeleteDirectory<WithStreamedUnaryMethod_MoveFile<WithStreamedUnaryMethod_LockFile<WithStreamedUnaryMethod_SetEndOfFile<WithStreamedUnaryMethod_SetAllocationSize<WithStreamedUnaryMethod_SetFileAttributes<WithStreamedUnaryMethod_UnlockFile<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_CloseFile<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_FlushFileBuffer<WithStreamedUnaryMethod_GetFileInformation<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_DeleteDirectory<WithStreamedUnaryMethod_MoveFile<WithStreamedUnaryMethod_LockFile<WithStreamedUnaryMethod_SetEndOfFile<WithStreamedUnaryMethod_SetAllocationSize<WithStreamedUnaryMethod_SetFileAttributes<WithStreamedUnaryMethod_UnlockFile<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace drive_protocol


#endif  // GRPC_DriveProcedure_2eproto__INCLUDED
