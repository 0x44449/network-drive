// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#include "Request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace drive_protocol {
namespace request {
constexpr RequestInfo::RequestInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : process_id_(uint64_t{0u})
  , is_directory_(false)
  , delete_on_close_(false)
  , paging_io_(false)
  , synchronous_io_(false)
  , no_cache_(false)
  , write_to_end_of_file_(false){}
struct RequestInfoDefaultTypeInternal {
  constexpr RequestInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestInfoDefaultTypeInternal() {}
  union {
    RequestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
constexpr CredentialInfo::CredentialInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CredentialInfoDefaultTypeInternal {
  constexpr CredentialInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CredentialInfoDefaultTypeInternal() {}
  union {
    CredentialInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CredentialInfoDefaultTypeInternal _CredentialInfo_default_instance_;
constexpr CreateFileRequest::CreateFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , desired_access_(uint64_t{0u})
  , file_attributes_(uint64_t{0u})
  , share_access_(uint64_t{0u})
  , create_disposition_(uint64_t{0u})
  , create_options_(uint64_t{0u}){}
struct CreateFileRequestDefaultTypeInternal {
  constexpr CreateFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateFileRequestDefaultTypeInternal() {}
  union {
    CreateFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateFileRequestDefaultTypeInternal _CreateFileRequest_default_instance_;
constexpr CloseFileRequest::CloseFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr){}
struct CloseFileRequestDefaultTypeInternal {
  constexpr CloseFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseFileRequestDefaultTypeInternal() {}
  union {
    CloseFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseFileRequestDefaultTypeInternal _CloseFileRequest_default_instance_;
constexpr ReadFileRequest::ReadFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , length_(uint64_t{0u})
  , offset_(int64_t{0}){}
struct ReadFileRequestDefaultTypeInternal {
  constexpr ReadFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadFileRequestDefaultTypeInternal() {}
  union {
    ReadFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadFileRequestDefaultTypeInternal _ReadFileRequest_default_instance_;
constexpr WriteFileRequest::WriteFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , length_(uint64_t{0u})
  , offset_(int64_t{0}){}
struct WriteFileRequestDefaultTypeInternal {
  constexpr WriteFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteFileRequestDefaultTypeInternal() {}
  union {
    WriteFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteFileRequestDefaultTypeInternal _WriteFileRequest_default_instance_;
constexpr FlushFileBufferRequest::FlushFileBufferRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr){}
struct FlushFileBufferRequestDefaultTypeInternal {
  constexpr FlushFileBufferRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlushFileBufferRequestDefaultTypeInternal() {}
  union {
    FlushFileBufferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlushFileBufferRequestDefaultTypeInternal _FlushFileBufferRequest_default_instance_;
constexpr GetFileInformationRequest::GetFileInformationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr){}
struct GetFileInformationRequestDefaultTypeInternal {
  constexpr GetFileInformationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFileInformationRequestDefaultTypeInternal() {}
  union {
    GetFileInformationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFileInformationRequestDefaultTypeInternal _GetFileInformationRequest_default_instance_;
constexpr DeleteFileRequest::DeleteFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr){}
struct DeleteFileRequestDefaultTypeInternal {
  constexpr DeleteFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteFileRequestDefaultTypeInternal() {}
  union {
    DeleteFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteFileRequestDefaultTypeInternal _DeleteFileRequest_default_instance_;
constexpr DeleteDirectoryRequest::DeleteDirectoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr){}
struct DeleteDirectoryRequestDefaultTypeInternal {
  constexpr DeleteDirectoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteDirectoryRequestDefaultTypeInternal() {}
  union {
    DeleteDirectoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteDirectoryRequestDefaultTypeInternal _DeleteDirectoryRequest_default_instance_;
constexpr MoveFileRequest::MoveFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , replace_if_existing_(false){}
struct MoveFileRequestDefaultTypeInternal {
  constexpr MoveFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveFileRequestDefaultTypeInternal() {}
  union {
    MoveFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveFileRequestDefaultTypeInternal _MoveFileRequest_default_instance_;
constexpr LockFileRequest::LockFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , offset_(int64_t{0})
  , length_(int64_t{0}){}
struct LockFileRequestDefaultTypeInternal {
  constexpr LockFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LockFileRequestDefaultTypeInternal() {}
  union {
    LockFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LockFileRequestDefaultTypeInternal _LockFileRequest_default_instance_;
constexpr SetEndOfFileRequest::SetEndOfFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , offset_(int64_t{0}){}
struct SetEndOfFileRequestDefaultTypeInternal {
  constexpr SetEndOfFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetEndOfFileRequestDefaultTypeInternal() {}
  union {
    SetEndOfFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetEndOfFileRequestDefaultTypeInternal _SetEndOfFileRequest_default_instance_;
constexpr SetAllocationSizeRequest::SetAllocationSizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , size_(int64_t{0}){}
struct SetAllocationSizeRequestDefaultTypeInternal {
  constexpr SetAllocationSizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAllocationSizeRequestDefaultTypeInternal() {}
  union {
    SetAllocationSizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAllocationSizeRequestDefaultTypeInternal _SetAllocationSizeRequest_default_instance_;
constexpr SetFileAttributesRequest::SetFileAttributesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , file_attributes_(uint64_t{0u}){}
struct SetFileAttributesRequestDefaultTypeInternal {
  constexpr SetFileAttributesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetFileAttributesRequestDefaultTypeInternal() {}
  union {
    SetFileAttributesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetFileAttributesRequestDefaultTypeInternal _SetFileAttributesRequest_default_instance_;
constexpr UnlockFileRequest::UnlockFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , cred_(nullptr)
  , offset_(int64_t{0})
  , length_(int64_t{0}){}
struct UnlockFileRequestDefaultTypeInternal {
  constexpr UnlockFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnlockFileRequestDefaultTypeInternal() {}
  union {
    UnlockFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnlockFileRequestDefaultTypeInternal _UnlockFileRequest_default_instance_;
}  // namespace request
}  // namespace drive_protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Request_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Request_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Request_2eproto = nullptr;

const uint32_t TableStruct_Request_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, process_id_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, is_directory_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, delete_on_close_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, paging_io_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, synchronous_io_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, no_cache_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::RequestInfo, write_to_end_of_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CredentialInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, desired_access_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, file_attributes_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, share_access_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, create_disposition_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CreateFileRequest, create_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CloseFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CloseFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CloseFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::CloseFileRequest, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::ReadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::ReadFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::ReadFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::ReadFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::ReadFileRequest, length_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::ReadFileRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, length_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::WriteFileRequest, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::FlushFileBufferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::FlushFileBufferRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::FlushFileBufferRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::FlushFileBufferRequest, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::GetFileInformationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::GetFileInformationRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::GetFileInformationRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::GetFileInformationRequest, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteFileRequest, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteDirectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteDirectoryRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteDirectoryRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::DeleteDirectoryRequest, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::MoveFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::MoveFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::MoveFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::MoveFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::MoveFileRequest, new_file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::MoveFileRequest, replace_if_existing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::LockFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::LockFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::LockFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::LockFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::LockFileRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::LockFileRequest, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetEndOfFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetEndOfFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetEndOfFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetEndOfFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetEndOfFileRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetAllocationSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetAllocationSizeRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetAllocationSizeRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetAllocationSizeRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetAllocationSizeRequest, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetFileAttributesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetFileAttributesRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetFileAttributesRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetFileAttributesRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::SetFileAttributesRequest, file_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::UnlockFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::UnlockFileRequest, req_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::UnlockFileRequest, cred_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::UnlockFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::UnlockFileRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::drive_protocol::request::UnlockFileRequest, length_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::drive_protocol::request::RequestInfo)},
  { 13, -1, -1, sizeof(::drive_protocol::request::CredentialInfo)},
  { 19, -1, -1, sizeof(::drive_protocol::request::CreateFileRequest)},
  { 33, -1, -1, sizeof(::drive_protocol::request::CloseFileRequest)},
  { 42, -1, -1, sizeof(::drive_protocol::request::ReadFileRequest)},
  { 53, -1, -1, sizeof(::drive_protocol::request::WriteFileRequest)},
  { 65, -1, -1, sizeof(::drive_protocol::request::FlushFileBufferRequest)},
  { 74, -1, -1, sizeof(::drive_protocol::request::GetFileInformationRequest)},
  { 83, -1, -1, sizeof(::drive_protocol::request::DeleteFileRequest)},
  { 92, -1, -1, sizeof(::drive_protocol::request::DeleteDirectoryRequest)},
  { 101, -1, -1, sizeof(::drive_protocol::request::MoveFileRequest)},
  { 112, -1, -1, sizeof(::drive_protocol::request::LockFileRequest)},
  { 123, -1, -1, sizeof(::drive_protocol::request::SetEndOfFileRequest)},
  { 133, -1, -1, sizeof(::drive_protocol::request::SetAllocationSizeRequest)},
  { 143, -1, -1, sizeof(::drive_protocol::request::SetFileAttributesRequest)},
  { 153, -1, -1, sizeof(::drive_protocol::request::UnlockFileRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_RequestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_CredentialInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_CreateFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_CloseFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_ReadFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_WriteFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_FlushFileBufferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_GetFileInformationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_DeleteFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_DeleteDirectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_MoveFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_LockFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_SetEndOfFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_SetAllocationSizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_SetFileAttributesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::drive_protocol::request::_UnlockFileRequest_default_instance_),
};

const char descriptor_table_protodef_Request_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rRequest.proto\022\026drive_protocol.request\""
  "\253\001\n\013RequestInfo\022\022\n\nprocess_id\030\001 \001(\004\022\024\n\014i"
  "s_directory\030\002 \001(\010\022\027\n\017delete_on_close\030\003 \001"
  "(\010\022\021\n\tpaging_io\030\004 \001(\010\022\026\n\016synchronous_io\030"
  "\005 \001(\010\022\020\n\010no_cache\030\006 \001(\010\022\034\n\024write_to_end_"
  "of_file\030\007 \001(\010\"\020\n\016CredentialInfo\"\211\002\n\021Crea"
  "teFileRequest\0220\n\003req\030\001 \001(\0132#.drive_proto"
  "col.request.RequestInfo\0224\n\004cred\030\002 \001(\0132&."
  "drive_protocol.request.CredentialInfo\022\021\n"
  "\tfile_name\030\003 \001(\t\022\026\n\016desired_access\030\004 \001(\004"
  "\022\027\n\017file_attributes\030\005 \001(\004\022\024\n\014share_acces"
  "s\030\006 \001(\004\022\032\n\022create_disposition\030\007 \001(\004\022\026\n\016c"
  "reate_options\030\010 \001(\004\"\215\001\n\020CloseFileRequest"
  "\0220\n\003req\030\001 \001(\0132#.drive_protocol.request.R"
  "equestInfo\0224\n\004cred\030\002 \001(\0132&.drive_protoco"
  "l.request.CredentialInfo\022\021\n\tfile_name\030\003 "
  "\001(\t\"\254\001\n\017ReadFileRequest\0220\n\003req\030\001 \001(\0132#.d"
  "rive_protocol.request.RequestInfo\0224\n\004cre"
  "d\030\002 \001(\0132&.drive_protocol.request.Credent"
  "ialInfo\022\021\n\tfile_name\030\003 \001(\t\022\016\n\006length\030\004 \001"
  "(\004\022\016\n\006offset\030\005 \001(\003\"\275\001\n\020WriteFileRequest\022"
  "0\n\003req\030\001 \001(\0132#.drive_protocol.request.Re"
  "questInfo\0224\n\004cred\030\002 \001(\0132&.drive_protocol"
  ".request.CredentialInfo\022\021\n\tfile_name\030\003 \001"
  "(\t\022\016\n\006length\030\004 \001(\004\022\016\n\006offset\030\005 \001(\003\022\016\n\006bu"
  "ffer\030\006 \001(\014\"\223\001\n\026FlushFileBufferRequest\0220\n"
  "\003req\030\001 \001(\0132#.drive_protocol.request.Requ"
  "estInfo\0224\n\004cred\030\002 \001(\0132&.drive_protocol.r"
  "equest.CredentialInfo\022\021\n\tfile_name\030\003 \001(\t"
  "\"\226\001\n\031GetFileInformationRequest\0220\n\003req\030\001 "
  "\001(\0132#.drive_protocol.request.RequestInfo"
  "\0224\n\004cred\030\002 \001(\0132&.drive_protocol.request."
  "CredentialInfo\022\021\n\tfile_name\030\003 \001(\t\"\216\001\n\021De"
  "leteFileRequest\0220\n\003req\030\001 \001(\0132#.drive_pro"
  "tocol.request.RequestInfo\0224\n\004cred\030\002 \001(\0132"
  "&.drive_protocol.request.CredentialInfo\022"
  "\021\n\tfile_name\030\003 \001(\t\"\223\001\n\026DeleteDirectoryRe"
  "quest\0220\n\003req\030\001 \001(\0132#.drive_protocol.requ"
  "est.RequestInfo\0224\n\004cred\030\002 \001(\0132&.drive_pr"
  "otocol.request.CredentialInfo\022\021\n\tfile_na"
  "me\030\003 \001(\t\"\300\001\n\017MoveFileRequest\0220\n\003req\030\001 \001("
  "\0132#.drive_protocol.request.RequestInfo\0224"
  "\n\004cred\030\002 \001(\0132&.drive_protocol.request.Cr"
  "edentialInfo\022\021\n\tfile_name\030\003 \001(\t\022\025\n\rnew_f"
  "ile_name\030\004 \001(\t\022\033\n\023replace_if_existing\030\005 "
  "\001(\010\"\254\001\n\017LockFileRequest\0220\n\003req\030\001 \001(\0132#.d"
  "rive_protocol.request.RequestInfo\0224\n\004cre"
  "d\030\002 \001(\0132&.drive_protocol.request.Credent"
  "ialInfo\022\021\n\tfile_name\030\003 \001(\t\022\016\n\006offset\030\004 \001"
  "(\003\022\016\n\006length\030\005 \001(\003\"\240\001\n\023SetEndOfFileReque"
  "st\0220\n\003req\030\001 \001(\0132#.drive_protocol.request"
  ".RequestInfo\0224\n\004cred\030\002 \001(\0132&.drive_proto"
  "col.request.CredentialInfo\022\021\n\tfile_name\030"
  "\003 \001(\t\022\016\n\006offset\030\004 \001(\003\"\243\001\n\030SetAllocationS"
  "izeRequest\0220\n\003req\030\001 \001(\0132#.drive_protocol"
  ".request.RequestInfo\0224\n\004cred\030\002 \001(\0132&.dri"
  "ve_protocol.request.CredentialInfo\022\021\n\tfi"
  "le_name\030\003 \001(\t\022\014\n\004size\030\004 \001(\003\"\256\001\n\030SetFileA"
  "ttributesRequest\0220\n\003req\030\001 \001(\0132#.drive_pr"
  "otocol.request.RequestInfo\0224\n\004cred\030\002 \001(\013"
  "2&.drive_protocol.request.CredentialInfo"
  "\022\021\n\tfile_name\030\003 \001(\t\022\027\n\017file_attributes\030\004"
  " \001(\004\"\256\001\n\021UnlockFileRequest\0220\n\003req\030\001 \001(\0132"
  "#.drive_protocol.request.RequestInfo\0224\n\004"
  "cred\030\002 \001(\0132&.drive_protocol.request.Cred"
  "entialInfo\022\021\n\tfile_name\030\003 \001(\t\022\016\n\006offset\030"
  "\004 \001(\003\022\016\n\006length\030\005 \001(\003B\032\n\026drive_protocol."
  "requestP\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Request_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto = {
  false, false, 2697, descriptor_table_protodef_Request_2eproto, "Request.proto", 
  &descriptor_table_Request_2eproto_once, nullptr, 0, 16,
  schemas, file_default_instances, TableStruct_Request_2eproto::offsets,
  file_level_metadata_Request_2eproto, file_level_enum_descriptors_Request_2eproto, file_level_service_descriptors_Request_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Request_2eproto_getter() {
  return &descriptor_table_Request_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Request_2eproto(&descriptor_table_Request_2eproto);
namespace drive_protocol {
namespace request {

// ===================================================================

class RequestInfo::_Internal {
 public:
};

RequestInfo::RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&process_id_, &from.process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_to_end_of_file_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(write_to_end_of_file_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.RequestInfo)
}

inline void RequestInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&process_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_to_end_of_file_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(write_to_end_of_file_));
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.RequestInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestInfo::ArenaDtor(void* object) {
  RequestInfo* _this = reinterpret_cast< RequestInfo* >(object);
  (void)_this;
}
void RequestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.RequestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_to_end_of_file_) -
      reinterpret_cast<char*>(&process_id_)) + sizeof(write_to_end_of_file_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 process_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool delete_on_close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          delete_on_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool paging_io = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          paging_io_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool synchronous_io = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          synchronous_io_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_cache = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          no_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool write_to_end_of_file = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          write_to_end_of_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.RequestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 process_id = 1;
  if (this->_internal_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_process_id(), target);
  }

  // bool is_directory = 2;
  if (this->_internal_is_directory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_directory(), target);
  }

  // bool delete_on_close = 3;
  if (this->_internal_delete_on_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_on_close(), target);
  }

  // bool paging_io = 4;
  if (this->_internal_paging_io() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_paging_io(), target);
  }

  // bool synchronous_io = 5;
  if (this->_internal_synchronous_io() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_synchronous_io(), target);
  }

  // bool no_cache = 6;
  if (this->_internal_no_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_no_cache(), target);
  }

  // bool write_to_end_of_file = 7;
  if (this->_internal_write_to_end_of_file() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_write_to_end_of_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.RequestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 process_id = 1;
  if (this->_internal_process_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_process_id());
  }

  // bool is_directory = 2;
  if (this->_internal_is_directory() != 0) {
    total_size += 1 + 1;
  }

  // bool delete_on_close = 3;
  if (this->_internal_delete_on_close() != 0) {
    total_size += 1 + 1;
  }

  // bool paging_io = 4;
  if (this->_internal_paging_io() != 0) {
    total_size += 1 + 1;
  }

  // bool synchronous_io = 5;
  if (this->_internal_synchronous_io() != 0) {
    total_size += 1 + 1;
  }

  // bool no_cache = 6;
  if (this->_internal_no_cache() != 0) {
    total_size += 1 + 1;
  }

  // bool write_to_end_of_file = 7;
  if (this->_internal_write_to_end_of_file() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInfo::GetClassData() const { return &_class_data_; }

void RequestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestInfo *>(to)->MergeFrom(
      static_cast<const RequestInfo &>(from));
}


void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_process_id() != 0) {
    _internal_set_process_id(from._internal_process_id());
  }
  if (from._internal_is_directory() != 0) {
    _internal_set_is_directory(from._internal_is_directory());
  }
  if (from._internal_delete_on_close() != 0) {
    _internal_set_delete_on_close(from._internal_delete_on_close());
  }
  if (from._internal_paging_io() != 0) {
    _internal_set_paging_io(from._internal_paging_io());
  }
  if (from._internal_synchronous_io() != 0) {
    _internal_set_synchronous_io(from._internal_synchronous_io());
  }
  if (from._internal_no_cache() != 0) {
    _internal_set_no_cache(from._internal_no_cache());
  }
  if (from._internal_write_to_end_of_file() != 0) {
    _internal_set_write_to_end_of_file(from._internal_write_to_end_of_file());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInfo, write_to_end_of_file_)
      + sizeof(RequestInfo::write_to_end_of_file_)
      - PROTOBUF_FIELD_OFFSET(RequestInfo, process_id_)>(
          reinterpret_cast<char*>(&process_id_),
          reinterpret_cast<char*>(&other->process_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[0]);
}

// ===================================================================

class CredentialInfo::_Internal {
 public:
};

CredentialInfo::CredentialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.CredentialInfo)
}
CredentialInfo::CredentialInfo(const CredentialInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.CredentialInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CredentialInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CredentialInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CredentialInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[1]);
}

// ===================================================================

class CreateFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const CreateFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const CreateFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
CreateFileRequest::_Internal::req(const CreateFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
CreateFileRequest::_Internal::cred(const CreateFileRequest* msg) {
  return *msg->cred_;
}
CreateFileRequest::CreateFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.CreateFileRequest)
}
CreateFileRequest::CreateFileRequest(const CreateFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  ::memcpy(&desired_access_, &from.desired_access_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_options_) -
    reinterpret_cast<char*>(&desired_access_)) + sizeof(create_options_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.CreateFileRequest)
}

inline void CreateFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&create_options_) -
    reinterpret_cast<char*>(&req_)) + sizeof(create_options_));
}

CreateFileRequest::~CreateFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.CreateFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void CreateFileRequest::ArenaDtor(void* object) {
  CreateFileRequest* _this = reinterpret_cast< CreateFileRequest* >(object);
  (void)_this;
}
void CreateFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.CreateFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  ::memset(&desired_access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_options_) -
      reinterpret_cast<char*>(&desired_access_)) + sizeof(create_options_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.CreateFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 desired_access = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          desired_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          file_attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 share_access = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          share_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 create_disposition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          create_disposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 create_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          create_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.CreateFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.CreateFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint64 desired_access = 4;
  if (this->_internal_desired_access() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_desired_access(), target);
  }

  // uint64 file_attributes = 5;
  if (this->_internal_file_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_file_attributes(), target);
  }

  // uint64 share_access = 6;
  if (this->_internal_share_access() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_share_access(), target);
  }

  // uint64 create_disposition = 7;
  if (this->_internal_create_disposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_create_disposition(), target);
  }

  // uint64 create_options = 8;
  if (this->_internal_create_options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_create_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.CreateFileRequest)
  return target;
}

size_t CreateFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.CreateFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // uint64 desired_access = 4;
  if (this->_internal_desired_access() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_desired_access());
  }

  // uint64 file_attributes = 5;
  if (this->_internal_file_attributes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_file_attributes());
  }

  // uint64 share_access = 6;
  if (this->_internal_share_access() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_share_access());
  }

  // uint64 create_disposition = 7;
  if (this->_internal_create_disposition() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_create_disposition());
  }

  // uint64 create_options = 8;
  if (this->_internal_create_options() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_create_options());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateFileRequest::GetClassData() const { return &_class_data_; }

void CreateFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateFileRequest *>(to)->MergeFrom(
      static_cast<const CreateFileRequest &>(from));
}


void CreateFileRequest::MergeFrom(const CreateFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.CreateFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_desired_access() != 0) {
    _internal_set_desired_access(from._internal_desired_access());
  }
  if (from._internal_file_attributes() != 0) {
    _internal_set_file_attributes(from._internal_file_attributes());
  }
  if (from._internal_share_access() != 0) {
    _internal_set_share_access(from._internal_share_access());
  }
  if (from._internal_create_disposition() != 0) {
    _internal_set_create_disposition(from._internal_create_disposition());
  }
  if (from._internal_create_options() != 0) {
    _internal_set_create_options(from._internal_create_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateFileRequest::CopyFrom(const CreateFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.CreateFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFileRequest::IsInitialized() const {
  return true;
}

void CreateFileRequest::InternalSwap(CreateFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateFileRequest, create_options_)
      + sizeof(CreateFileRequest::create_options_)
      - PROTOBUF_FIELD_OFFSET(CreateFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[2]);
}

// ===================================================================

class CloseFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const CloseFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const CloseFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
CloseFileRequest::_Internal::req(const CloseFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
CloseFileRequest::_Internal::cred(const CloseFileRequest* msg) {
  return *msg->cred_;
}
CloseFileRequest::CloseFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.CloseFileRequest)
}
CloseFileRequest::CloseFileRequest(const CloseFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.CloseFileRequest)
}

inline void CloseFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cred_) -
    reinterpret_cast<char*>(&req_)) + sizeof(cred_));
}

CloseFileRequest::~CloseFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.CloseFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void CloseFileRequest::ArenaDtor(void* object) {
  CloseFileRequest* _this = reinterpret_cast< CloseFileRequest* >(object);
  (void)_this;
}
void CloseFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.CloseFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.CloseFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.CloseFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.CloseFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.CloseFileRequest)
  return target;
}

size_t CloseFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.CloseFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseFileRequest::GetClassData() const { return &_class_data_; }

void CloseFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseFileRequest *>(to)->MergeFrom(
      static_cast<const CloseFileRequest &>(from));
}


void CloseFileRequest::MergeFrom(const CloseFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.CloseFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseFileRequest::CopyFrom(const CloseFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.CloseFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFileRequest::IsInitialized() const {
  return true;
}

void CloseFileRequest::InternalSwap(CloseFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseFileRequest, cred_)
      + sizeof(CloseFileRequest::cred_)
      - PROTOBUF_FIELD_OFFSET(CloseFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[3]);
}

// ===================================================================

class ReadFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const ReadFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const ReadFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
ReadFileRequest::_Internal::req(const ReadFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
ReadFileRequest::_Internal::cred(const ReadFileRequest* msg) {
  return *msg->cred_;
}
ReadFileRequest::ReadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.ReadFileRequest)
}
ReadFileRequest::ReadFileRequest(const ReadFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&length_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.ReadFileRequest)
}

inline void ReadFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&req_)) + sizeof(offset_));
}

ReadFileRequest::~ReadFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.ReadFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void ReadFileRequest::ArenaDtor(void* object) {
  ReadFileRequest* _this = reinterpret_cast< ReadFileRequest* >(object);
  (void)_this;
}
void ReadFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.ReadFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&length_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.ReadFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.ReadFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.ReadFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint64 length = 4;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_length(), target);
  }

  // int64 offset = 5;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.ReadFileRequest)
  return target;
}

size_t ReadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.ReadFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // uint64 length = 4;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  // int64 offset = 5;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadFileRequest::GetClassData() const { return &_class_data_; }

void ReadFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadFileRequest *>(to)->MergeFrom(
      static_cast<const ReadFileRequest &>(from));
}


void ReadFileRequest::MergeFrom(const ReadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.ReadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadFileRequest::CopyFrom(const ReadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.ReadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileRequest::IsInitialized() const {
  return true;
}

void ReadFileRequest::InternalSwap(ReadFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadFileRequest, offset_)
      + sizeof(ReadFileRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(ReadFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[4]);
}

// ===================================================================

class WriteFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const WriteFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const WriteFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
WriteFileRequest::_Internal::req(const WriteFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
WriteFileRequest::_Internal::cred(const WriteFileRequest* msg) {
  return *msg->cred_;
}
WriteFileRequest::WriteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.WriteFileRequest)
}
WriteFileRequest::WriteFileRequest(const WriteFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&length_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.WriteFileRequest)
}

inline void WriteFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&req_)) + sizeof(offset_));
}

WriteFileRequest::~WriteFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.WriteFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void WriteFileRequest::ArenaDtor(void* object) {
  WriteFileRequest* _this = reinterpret_cast< WriteFileRequest* >(object);
  (void)_this;
}
void WriteFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.WriteFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  buffer_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&length_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.WriteFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buffer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.WriteFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.WriteFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint64 length = 4;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_length(), target);
  }

  // int64 offset = 5;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_offset(), target);
  }

  // bytes buffer = 6;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.WriteFileRequest)
  return target;
}

size_t WriteFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.WriteFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // bytes buffer = 6;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // uint64 length = 4;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  // int64 offset = 5;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteFileRequest::GetClassData() const { return &_class_data_; }

void WriteFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteFileRequest *>(to)->MergeFrom(
      static_cast<const WriteFileRequest &>(from));
}


void WriteFileRequest::MergeFrom(const WriteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.WriteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteFileRequest::CopyFrom(const WriteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.WriteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFileRequest::IsInitialized() const {
  return true;
}

void WriteFileRequest::InternalSwap(WriteFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteFileRequest, offset_)
      + sizeof(WriteFileRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(WriteFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[5]);
}

// ===================================================================

class FlushFileBufferRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const FlushFileBufferRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const FlushFileBufferRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
FlushFileBufferRequest::_Internal::req(const FlushFileBufferRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
FlushFileBufferRequest::_Internal::cred(const FlushFileBufferRequest* msg) {
  return *msg->cred_;
}
FlushFileBufferRequest::FlushFileBufferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.FlushFileBufferRequest)
}
FlushFileBufferRequest::FlushFileBufferRequest(const FlushFileBufferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.FlushFileBufferRequest)
}

inline void FlushFileBufferRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cred_) -
    reinterpret_cast<char*>(&req_)) + sizeof(cred_));
}

FlushFileBufferRequest::~FlushFileBufferRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.FlushFileBufferRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlushFileBufferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void FlushFileBufferRequest::ArenaDtor(void* object) {
  FlushFileBufferRequest* _this = reinterpret_cast< FlushFileBufferRequest* >(object);
  (void)_this;
}
void FlushFileBufferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushFileBufferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlushFileBufferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.FlushFileBufferRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushFileBufferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.FlushFileBufferRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushFileBufferRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.FlushFileBufferRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.FlushFileBufferRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.FlushFileBufferRequest)
  return target;
}

size_t FlushFileBufferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.FlushFileBufferRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushFileBufferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlushFileBufferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushFileBufferRequest::GetClassData() const { return &_class_data_; }

void FlushFileBufferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlushFileBufferRequest *>(to)->MergeFrom(
      static_cast<const FlushFileBufferRequest &>(from));
}


void FlushFileBufferRequest::MergeFrom(const FlushFileBufferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.FlushFileBufferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushFileBufferRequest::CopyFrom(const FlushFileBufferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.FlushFileBufferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushFileBufferRequest::IsInitialized() const {
  return true;
}

void FlushFileBufferRequest::InternalSwap(FlushFileBufferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushFileBufferRequest, cred_)
      + sizeof(FlushFileBufferRequest::cred_)
      - PROTOBUF_FIELD_OFFSET(FlushFileBufferRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushFileBufferRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[6]);
}

// ===================================================================

class GetFileInformationRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const GetFileInformationRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const GetFileInformationRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
GetFileInformationRequest::_Internal::req(const GetFileInformationRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
GetFileInformationRequest::_Internal::cred(const GetFileInformationRequest* msg) {
  return *msg->cred_;
}
GetFileInformationRequest::GetFileInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.GetFileInformationRequest)
}
GetFileInformationRequest::GetFileInformationRequest(const GetFileInformationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.GetFileInformationRequest)
}

inline void GetFileInformationRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cred_) -
    reinterpret_cast<char*>(&req_)) + sizeof(cred_));
}

GetFileInformationRequest::~GetFileInformationRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.GetFileInformationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFileInformationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void GetFileInformationRequest::ArenaDtor(void* object) {
  GetFileInformationRequest* _this = reinterpret_cast< GetFileInformationRequest* >(object);
  (void)_this;
}
void GetFileInformationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFileInformationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFileInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.GetFileInformationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileInformationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.GetFileInformationRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileInformationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.GetFileInformationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.GetFileInformationRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.GetFileInformationRequest)
  return target;
}

size_t GetFileInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.GetFileInformationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileInformationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFileInformationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileInformationRequest::GetClassData() const { return &_class_data_; }

void GetFileInformationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFileInformationRequest *>(to)->MergeFrom(
      static_cast<const GetFileInformationRequest &>(from));
}


void GetFileInformationRequest::MergeFrom(const GetFileInformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.GetFileInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileInformationRequest::CopyFrom(const GetFileInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.GetFileInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInformationRequest::IsInitialized() const {
  return true;
}

void GetFileInformationRequest::InternalSwap(GetFileInformationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFileInformationRequest, cred_)
      + sizeof(GetFileInformationRequest::cred_)
      - PROTOBUF_FIELD_OFFSET(GetFileInformationRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileInformationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[7]);
}

// ===================================================================

class DeleteFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const DeleteFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const DeleteFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
DeleteFileRequest::_Internal::req(const DeleteFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
DeleteFileRequest::_Internal::cred(const DeleteFileRequest* msg) {
  return *msg->cred_;
}
DeleteFileRequest::DeleteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.DeleteFileRequest)
}
DeleteFileRequest::DeleteFileRequest(const DeleteFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.DeleteFileRequest)
}

inline void DeleteFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cred_) -
    reinterpret_cast<char*>(&req_)) + sizeof(cred_));
}

DeleteFileRequest::~DeleteFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.DeleteFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void DeleteFileRequest::ArenaDtor(void* object) {
  DeleteFileRequest* _this = reinterpret_cast< DeleteFileRequest* >(object);
  (void)_this;
}
void DeleteFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.DeleteFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.DeleteFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.DeleteFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.DeleteFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.DeleteFileRequest)
  return target;
}

size_t DeleteFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.DeleteFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteFileRequest::GetClassData() const { return &_class_data_; }

void DeleteFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteFileRequest *>(to)->MergeFrom(
      static_cast<const DeleteFileRequest &>(from));
}


void DeleteFileRequest::MergeFrom(const DeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.DeleteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteFileRequest::CopyFrom(const DeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.DeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileRequest::IsInitialized() const {
  return true;
}

void DeleteFileRequest::InternalSwap(DeleteFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteFileRequest, cred_)
      + sizeof(DeleteFileRequest::cred_)
      - PROTOBUF_FIELD_OFFSET(DeleteFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[8]);
}

// ===================================================================

class DeleteDirectoryRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const DeleteDirectoryRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const DeleteDirectoryRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
DeleteDirectoryRequest::_Internal::req(const DeleteDirectoryRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
DeleteDirectoryRequest::_Internal::cred(const DeleteDirectoryRequest* msg) {
  return *msg->cred_;
}
DeleteDirectoryRequest::DeleteDirectoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.DeleteDirectoryRequest)
}
DeleteDirectoryRequest::DeleteDirectoryRequest(const DeleteDirectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.DeleteDirectoryRequest)
}

inline void DeleteDirectoryRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cred_) -
    reinterpret_cast<char*>(&req_)) + sizeof(cred_));
}

DeleteDirectoryRequest::~DeleteDirectoryRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.DeleteDirectoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteDirectoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void DeleteDirectoryRequest::ArenaDtor(void* object) {
  DeleteDirectoryRequest* _this = reinterpret_cast< DeleteDirectoryRequest* >(object);
  (void)_this;
}
void DeleteDirectoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDirectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.DeleteDirectoryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDirectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.DeleteDirectoryRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDirectoryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.DeleteDirectoryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.DeleteDirectoryRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.DeleteDirectoryRequest)
  return target;
}

size_t DeleteDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.DeleteDirectoryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDirectoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteDirectoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDirectoryRequest::GetClassData() const { return &_class_data_; }

void DeleteDirectoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteDirectoryRequest *>(to)->MergeFrom(
      static_cast<const DeleteDirectoryRequest &>(from));
}


void DeleteDirectoryRequest::MergeFrom(const DeleteDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.DeleteDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDirectoryRequest::CopyFrom(const DeleteDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.DeleteDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDirectoryRequest::IsInitialized() const {
  return true;
}

void DeleteDirectoryRequest::InternalSwap(DeleteDirectoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteDirectoryRequest, cred_)
      + sizeof(DeleteDirectoryRequest::cred_)
      - PROTOBUF_FIELD_OFFSET(DeleteDirectoryRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDirectoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[9]);
}

// ===================================================================

class MoveFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const MoveFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const MoveFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
MoveFileRequest::_Internal::req(const MoveFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
MoveFileRequest::_Internal::cred(const MoveFileRequest* msg) {
  return *msg->cred_;
}
MoveFileRequest::MoveFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.MoveFileRequest)
}
MoveFileRequest::MoveFileRequest(const MoveFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  new_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_file_name().empty()) {
    new_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  replace_if_existing_ = from.replace_if_existing_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.MoveFileRequest)
}

inline void MoveFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replace_if_existing_) -
    reinterpret_cast<char*>(&req_)) + sizeof(replace_if_existing_));
}

MoveFileRequest::~MoveFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.MoveFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void MoveFileRequest::ArenaDtor(void* object) {
  MoveFileRequest* _this = reinterpret_cast< MoveFileRequest* >(object);
  (void)_this;
}
void MoveFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.MoveFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  new_file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  replace_if_existing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.MoveFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string new_file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.MoveFileRequest.new_file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool replace_if_existing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          replace_if_existing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.MoveFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.MoveFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // string new_file_name = 4;
  if (!this->_internal_new_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_file_name().data(), static_cast<int>(this->_internal_new_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.MoveFileRequest.new_file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_file_name(), target);
  }

  // bool replace_if_existing = 5;
  if (this->_internal_replace_if_existing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_replace_if_existing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.MoveFileRequest)
  return target;
}

size_t MoveFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.MoveFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string new_file_name = 4;
  if (!this->_internal_new_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // bool replace_if_existing = 5;
  if (this->_internal_replace_if_existing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveFileRequest::GetClassData() const { return &_class_data_; }

void MoveFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveFileRequest *>(to)->MergeFrom(
      static_cast<const MoveFileRequest &>(from));
}


void MoveFileRequest::MergeFrom(const MoveFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.MoveFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_new_file_name().empty()) {
    _internal_set_new_file_name(from._internal_new_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_replace_if_existing() != 0) {
    _internal_set_replace_if_existing(from._internal_replace_if_existing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveFileRequest::CopyFrom(const MoveFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.MoveFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFileRequest::IsInitialized() const {
  return true;
}

void MoveFileRequest::InternalSwap(MoveFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_file_name_, lhs_arena,
      &other->new_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveFileRequest, replace_if_existing_)
      + sizeof(MoveFileRequest::replace_if_existing_)
      - PROTOBUF_FIELD_OFFSET(MoveFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[10]);
}

// ===================================================================

class LockFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const LockFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const LockFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
LockFileRequest::_Internal::req(const LockFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
LockFileRequest::_Internal::cred(const LockFileRequest* msg) {
  return *msg->cred_;
}
LockFileRequest::LockFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.LockFileRequest)
}
LockFileRequest::LockFileRequest(const LockFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.LockFileRequest)
}

inline void LockFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&req_)) + sizeof(length_));
}

LockFileRequest::~LockFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.LockFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LockFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void LockFileRequest::ArenaDtor(void* object) {
  LockFileRequest* _this = reinterpret_cast< LockFileRequest* >(object);
  (void)_this;
}
void LockFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LockFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.LockFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.LockFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LockFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.LockFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.LockFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset(), target);
  }

  // int64 length = 5;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.LockFileRequest)
  return target;
}

size_t LockFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.LockFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 length = 5;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LockFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockFileRequest::GetClassData() const { return &_class_data_; }

void LockFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LockFileRequest *>(to)->MergeFrom(
      static_cast<const LockFileRequest &>(from));
}


void LockFileRequest::MergeFrom(const LockFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.LockFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LockFileRequest::CopyFrom(const LockFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.LockFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockFileRequest::IsInitialized() const {
  return true;
}

void LockFileRequest::InternalSwap(LockFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockFileRequest, length_)
      + sizeof(LockFileRequest::length_)
      - PROTOBUF_FIELD_OFFSET(LockFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[11]);
}

// ===================================================================

class SetEndOfFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const SetEndOfFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const SetEndOfFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
SetEndOfFileRequest::_Internal::req(const SetEndOfFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
SetEndOfFileRequest::_Internal::cred(const SetEndOfFileRequest* msg) {
  return *msg->cred_;
}
SetEndOfFileRequest::SetEndOfFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.SetEndOfFileRequest)
}
SetEndOfFileRequest::SetEndOfFileRequest(const SetEndOfFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.SetEndOfFileRequest)
}

inline void SetEndOfFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&req_)) + sizeof(offset_));
}

SetEndOfFileRequest::~SetEndOfFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.SetEndOfFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetEndOfFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void SetEndOfFileRequest::ArenaDtor(void* object) {
  SetEndOfFileRequest* _this = reinterpret_cast< SetEndOfFileRequest* >(object);
  (void)_this;
}
void SetEndOfFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetEndOfFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetEndOfFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.SetEndOfFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  offset_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEndOfFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.SetEndOfFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEndOfFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.SetEndOfFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.SetEndOfFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.SetEndOfFileRequest)
  return target;
}

size_t SetEndOfFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.SetEndOfFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEndOfFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetEndOfFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEndOfFileRequest::GetClassData() const { return &_class_data_; }

void SetEndOfFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetEndOfFileRequest *>(to)->MergeFrom(
      static_cast<const SetEndOfFileRequest &>(from));
}


void SetEndOfFileRequest::MergeFrom(const SetEndOfFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.SetEndOfFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEndOfFileRequest::CopyFrom(const SetEndOfFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.SetEndOfFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndOfFileRequest::IsInitialized() const {
  return true;
}

void SetEndOfFileRequest::InternalSwap(SetEndOfFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetEndOfFileRequest, offset_)
      + sizeof(SetEndOfFileRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(SetEndOfFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndOfFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[12]);
}

// ===================================================================

class SetAllocationSizeRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const SetAllocationSizeRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const SetAllocationSizeRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
SetAllocationSizeRequest::_Internal::req(const SetAllocationSizeRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
SetAllocationSizeRequest::_Internal::cred(const SetAllocationSizeRequest* msg) {
  return *msg->cred_;
}
SetAllocationSizeRequest::SetAllocationSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.SetAllocationSizeRequest)
}
SetAllocationSizeRequest::SetAllocationSizeRequest(const SetAllocationSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.SetAllocationSizeRequest)
}

inline void SetAllocationSizeRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&req_)) + sizeof(size_));
}

SetAllocationSizeRequest::~SetAllocationSizeRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.SetAllocationSizeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAllocationSizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void SetAllocationSizeRequest::ArenaDtor(void* object) {
  SetAllocationSizeRequest* _this = reinterpret_cast< SetAllocationSizeRequest* >(object);
  (void)_this;
}
void SetAllocationSizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAllocationSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAllocationSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.SetAllocationSizeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAllocationSizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.SetAllocationSizeRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAllocationSizeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.SetAllocationSizeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.SetAllocationSizeRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.SetAllocationSizeRequest)
  return target;
}

size_t SetAllocationSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.SetAllocationSizeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAllocationSizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAllocationSizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAllocationSizeRequest::GetClassData() const { return &_class_data_; }

void SetAllocationSizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAllocationSizeRequest *>(to)->MergeFrom(
      static_cast<const SetAllocationSizeRequest &>(from));
}


void SetAllocationSizeRequest::MergeFrom(const SetAllocationSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.SetAllocationSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAllocationSizeRequest::CopyFrom(const SetAllocationSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.SetAllocationSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllocationSizeRequest::IsInitialized() const {
  return true;
}

void SetAllocationSizeRequest::InternalSwap(SetAllocationSizeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAllocationSizeRequest, size_)
      + sizeof(SetAllocationSizeRequest::size_)
      - PROTOBUF_FIELD_OFFSET(SetAllocationSizeRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAllocationSizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[13]);
}

// ===================================================================

class SetFileAttributesRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const SetFileAttributesRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const SetFileAttributesRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
SetFileAttributesRequest::_Internal::req(const SetFileAttributesRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
SetFileAttributesRequest::_Internal::cred(const SetFileAttributesRequest* msg) {
  return *msg->cred_;
}
SetFileAttributesRequest::SetFileAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.SetFileAttributesRequest)
}
SetFileAttributesRequest::SetFileAttributesRequest(const SetFileAttributesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  file_attributes_ = from.file_attributes_;
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.SetFileAttributesRequest)
}

inline void SetFileAttributesRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_attributes_) -
    reinterpret_cast<char*>(&req_)) + sizeof(file_attributes_));
}

SetFileAttributesRequest::~SetFileAttributesRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.SetFileAttributesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetFileAttributesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void SetFileAttributesRequest::ArenaDtor(void* object) {
  SetFileAttributesRequest* _this = reinterpret_cast< SetFileAttributesRequest* >(object);
  (void)_this;
}
void SetFileAttributesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetFileAttributesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetFileAttributesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.SetFileAttributesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  file_attributes_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetFileAttributesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.SetFileAttributesRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          file_attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetFileAttributesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.SetFileAttributesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.SetFileAttributesRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint64 file_attributes = 4;
  if (this->_internal_file_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_file_attributes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.SetFileAttributesRequest)
  return target;
}

size_t SetFileAttributesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.SetFileAttributesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // uint64 file_attributes = 4;
  if (this->_internal_file_attributes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_file_attributes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetFileAttributesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetFileAttributesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetFileAttributesRequest::GetClassData() const { return &_class_data_; }

void SetFileAttributesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetFileAttributesRequest *>(to)->MergeFrom(
      static_cast<const SetFileAttributesRequest &>(from));
}


void SetFileAttributesRequest::MergeFrom(const SetFileAttributesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.SetFileAttributesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_file_attributes() != 0) {
    _internal_set_file_attributes(from._internal_file_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetFileAttributesRequest::CopyFrom(const SetFileAttributesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.SetFileAttributesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFileAttributesRequest::IsInitialized() const {
  return true;
}

void SetFileAttributesRequest::InternalSwap(SetFileAttributesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetFileAttributesRequest, file_attributes_)
      + sizeof(SetFileAttributesRequest::file_attributes_)
      - PROTOBUF_FIELD_OFFSET(SetFileAttributesRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetFileAttributesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[14]);
}

// ===================================================================

class UnlockFileRequest::_Internal {
 public:
  static const ::drive_protocol::request::RequestInfo& req(const UnlockFileRequest* msg);
  static const ::drive_protocol::request::CredentialInfo& cred(const UnlockFileRequest* msg);
};

const ::drive_protocol::request::RequestInfo&
UnlockFileRequest::_Internal::req(const UnlockFileRequest* msg) {
  return *msg->req_;
}
const ::drive_protocol::request::CredentialInfo&
UnlockFileRequest::_Internal::cred(const UnlockFileRequest* msg) {
  return *msg->cred_;
}
UnlockFileRequest::UnlockFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:drive_protocol.request.UnlockFileRequest)
}
UnlockFileRequest::UnlockFileRequest(const UnlockFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::drive_protocol::request::RequestInfo(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_cred()) {
    cred_ = new ::drive_protocol::request::CredentialInfo(*from.cred_);
  } else {
    cred_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:drive_protocol.request.UnlockFileRequest)
}

inline void UnlockFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&req_)) + sizeof(length_));
}

UnlockFileRequest::~UnlockFileRequest() {
  // @@protoc_insertion_point(destructor:drive_protocol.request.UnlockFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnlockFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete cred_;
}

void UnlockFileRequest::ArenaDtor(void* object) {
  UnlockFileRequest* _this = reinterpret_cast< UnlockFileRequest* >(object);
  (void)_this;
}
void UnlockFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlockFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnlockFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:drive_protocol.request.UnlockFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cred_ != nullptr) {
    delete cred_;
  }
  cred_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlockFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .drive_protocol.request.RequestInfo req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .drive_protocol.request.CredentialInfo cred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cred(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "drive_protocol.request.UnlockFileRequest.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnlockFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:drive_protocol.request.UnlockFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cred(this), target, stream);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "drive_protocol.request.UnlockFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset(), target);
  }

  // int64 length = 5;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:drive_protocol.request.UnlockFileRequest)
  return target;
}

size_t UnlockFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:drive_protocol.request.UnlockFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .drive_protocol.request.RequestInfo req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .drive_protocol.request.CredentialInfo cred = 2;
  if (this->_internal_has_cred()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cred_);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 length = 5;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlockFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnlockFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlockFileRequest::GetClassData() const { return &_class_data_; }

void UnlockFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnlockFileRequest *>(to)->MergeFrom(
      static_cast<const UnlockFileRequest &>(from));
}


void UnlockFileRequest::MergeFrom(const UnlockFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:drive_protocol.request.UnlockFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::drive_protocol::request::RequestInfo::MergeFrom(from._internal_req());
  }
  if (from._internal_has_cred()) {
    _internal_mutable_cred()->::drive_protocol::request::CredentialInfo::MergeFrom(from._internal_cred());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnlockFileRequest::CopyFrom(const UnlockFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:drive_protocol.request.UnlockFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockFileRequest::IsInitialized() const {
  return true;
}

void UnlockFileRequest::InternalSwap(UnlockFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnlockFileRequest, length_)
      + sizeof(UnlockFileRequest::length_)
      - PROTOBUF_FIELD_OFFSET(UnlockFileRequest, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace request
}  // namespace drive_protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::drive_protocol::request::RequestInfo* Arena::CreateMaybeMessage< ::drive_protocol::request::RequestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::CredentialInfo* Arena::CreateMaybeMessage< ::drive_protocol::request::CredentialInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::CredentialInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::CreateFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::CreateFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::CreateFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::CloseFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::CloseFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::CloseFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::ReadFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::ReadFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::ReadFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::WriteFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::WriteFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::WriteFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::FlushFileBufferRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::FlushFileBufferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::FlushFileBufferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::GetFileInformationRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::GetFileInformationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::GetFileInformationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::DeleteFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::DeleteFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::DeleteFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::DeleteDirectoryRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::DeleteDirectoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::DeleteDirectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::MoveFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::MoveFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::MoveFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::LockFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::LockFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::LockFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::SetEndOfFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::SetEndOfFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::SetEndOfFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::SetAllocationSizeRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::SetAllocationSizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::SetAllocationSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::SetFileAttributesRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::SetFileAttributesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::SetFileAttributesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::drive_protocol::request::UnlockFileRequest* Arena::CreateMaybeMessage< ::drive_protocol::request::UnlockFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::drive_protocol::request::UnlockFileRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
