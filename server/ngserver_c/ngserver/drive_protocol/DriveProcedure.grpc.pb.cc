// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DriveProcedure.proto

#include "DriveProcedure.pb.h"
#include "DriveProcedure.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace drive_protocol {

static const char* DriveProcedure_method_names[] = {
  "/drive_protocol.DriveProcedure/CreateFile",
  "/drive_protocol.DriveProcedure/CloseFile",
  "/drive_protocol.DriveProcedure/ReadFile",
  "/drive_protocol.DriveProcedure/WriteFile",
  "/drive_protocol.DriveProcedure/FlushFileBuffer",
  "/drive_protocol.DriveProcedure/GetFileInformation",
  "/drive_protocol.DriveProcedure/DeleteFile",
  "/drive_protocol.DriveProcedure/DeleteDirectory",
  "/drive_protocol.DriveProcedure/MoveFile",
  "/drive_protocol.DriveProcedure/LockFile",
  "/drive_protocol.DriveProcedure/SetEndOfFile",
  "/drive_protocol.DriveProcedure/SetAllocationSize",
  "/drive_protocol.DriveProcedure/SetFileAttributes",
  "/drive_protocol.DriveProcedure/UnlockFile",
};

std::unique_ptr< DriveProcedure::Stub> DriveProcedure::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DriveProcedure::Stub> stub(new DriveProcedure::Stub(channel, options));
  return stub;
}

DriveProcedure::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateFile_(DriveProcedure_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseFile_(DriveProcedure_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadFile_(DriveProcedure_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteFile_(DriveProcedure_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushFileBuffer_(DriveProcedure_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFileInformation_(DriveProcedure_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFile_(DriveProcedure_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDirectory_(DriveProcedure_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveFile_(DriveProcedure_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockFile_(DriveProcedure_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndOfFile_(DriveProcedure_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAllocationSize_(DriveProcedure_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFileAttributes_(DriveProcedure_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockFile_(DriveProcedure_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DriveProcedure::Stub::CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::drive_protocol::response::CreateFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFile_, context, request, response);
}

void DriveProcedure::Stub::async::CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::CreateFile(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>* DriveProcedure::Stub::PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::CreateFileResponse, ::drive_protocol::request::CreateFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CreateFileResponse>* DriveProcedure::Stub::AsyncCreateFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::drive_protocol::response::CloseFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseFile_, context, request, response);
}

void DriveProcedure::Stub::async::CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::CloseFile(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>* DriveProcedure::Stub::PrepareAsyncCloseFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::CloseFileResponse, ::drive_protocol::request::CloseFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::CloseFileResponse>* DriveProcedure::Stub::AsyncCloseFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::drive_protocol::response::ReadFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadFile_, context, request, response);
}

void DriveProcedure::Stub::async::ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::ReadFile(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>* DriveProcedure::Stub::PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::ReadFileResponse, ::drive_protocol::request::ReadFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::ReadFileResponse>* DriveProcedure::Stub::AsyncReadFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::drive_protocol::response::WriteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteFile_, context, request, response);
}

void DriveProcedure::Stub::async::WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::WriteFile(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>* DriveProcedure::Stub::PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::WriteFileResponse, ::drive_protocol::request::WriteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::WriteFileResponse>* DriveProcedure::Stub::AsyncWriteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::drive_protocol::response::FlushFileBufferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FlushFileBuffer_, context, request, response);
}

void DriveProcedure::Stub::async::FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushFileBuffer_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::FlushFileBuffer(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushFileBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>* DriveProcedure::Stub::PrepareAsyncFlushFileBufferRaw(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::FlushFileBufferResponse, ::drive_protocol::request::FlushFileBufferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FlushFileBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::FlushFileBufferResponse>* DriveProcedure::Stub::AsyncFlushFileBufferRaw(::grpc::ClientContext* context, const ::drive_protocol::request::FlushFileBufferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFlushFileBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::drive_protocol::response::GetFileInformationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileInformation_, context, request, response);
}

void DriveProcedure::Stub::async::GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileInformation_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::GetFileInformation(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>* DriveProcedure::Stub::PrepareAsyncGetFileInformationRaw(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::GetFileInformationResponse, ::drive_protocol::request::GetFileInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::GetFileInformationResponse>* DriveProcedure::Stub::AsyncGetFileInformationRaw(::grpc::ClientContext* context, const ::drive_protocol::request::GetFileInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::drive_protocol::response::DeleteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFile_, context, request, response);
}

void DriveProcedure::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>* DriveProcedure::Stub::PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::DeleteFileResponse, ::drive_protocol::request::DeleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteFileResponse>* DriveProcedure::Stub::AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::drive_protocol::response::DeleteDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDirectory_, context, request, response);
}

void DriveProcedure::Stub::async::DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDirectory_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::DeleteDirectory(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>* DriveProcedure::Stub::PrepareAsyncDeleteDirectoryRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::DeleteDirectoryResponse, ::drive_protocol::request::DeleteDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::DeleteDirectoryResponse>* DriveProcedure::Stub::AsyncDeleteDirectoryRaw(::grpc::ClientContext* context, const ::drive_protocol::request::DeleteDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::drive_protocol::response::MoveFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveFile_, context, request, response);
}

void DriveProcedure::Stub::async::MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::MoveFile(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>* DriveProcedure::Stub::PrepareAsyncMoveFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::MoveFileResponse, ::drive_protocol::request::MoveFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::MoveFileResponse>* DriveProcedure::Stub::AsyncMoveFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::MoveFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::drive_protocol::response::LockFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LockFile_, context, request, response);
}

void DriveProcedure::Stub::async::LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::LockFile(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>* DriveProcedure::Stub::PrepareAsyncLockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::LockFileResponse, ::drive_protocol::request::LockFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LockFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::LockFileResponse>* DriveProcedure::Stub::AsyncLockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::LockFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::drive_protocol::response::SetEndOfFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEndOfFile_, context, request, response);
}

void DriveProcedure::Stub::async::SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndOfFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::SetEndOfFile(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndOfFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>* DriveProcedure::Stub::PrepareAsyncSetEndOfFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::SetEndOfFileResponse, ::drive_protocol::request::SetEndOfFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEndOfFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetEndOfFileResponse>* DriveProcedure::Stub::AsyncSetEndOfFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetEndOfFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEndOfFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::drive_protocol::response::SetAllocationSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAllocationSize_, context, request, response);
}

void DriveProcedure::Stub::async::SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAllocationSize_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::SetAllocationSize(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAllocationSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>* DriveProcedure::Stub::PrepareAsyncSetAllocationSizeRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::SetAllocationSizeResponse, ::drive_protocol::request::SetAllocationSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAllocationSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetAllocationSizeResponse>* DriveProcedure::Stub::AsyncSetAllocationSizeRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetAllocationSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAllocationSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::drive_protocol::response::SetFileAttributesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFileAttributes_, context, request, response);
}

void DriveProcedure::Stub::async::SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFileAttributes_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::SetFileAttributes(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFileAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>* DriveProcedure::Stub::PrepareAsyncSetFileAttributesRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::SetFileAttributesResponse, ::drive_protocol::request::SetFileAttributesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFileAttributes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::SetFileAttributesResponse>* DriveProcedure::Stub::AsyncSetFileAttributesRaw(::grpc::ClientContext* context, const ::drive_protocol::request::SetFileAttributesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFileAttributesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DriveProcedure::Stub::UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::drive_protocol::response::UnlockFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockFile_, context, request, response);
}

void DriveProcedure::Stub::async::UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockFile_, context, request, response, std::move(f));
}

void DriveProcedure::Stub::async::UnlockFile(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>* DriveProcedure::Stub::PrepareAsyncUnlockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::drive_protocol::response::UnlockFileResponse, ::drive_protocol::request::UnlockFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::drive_protocol::response::UnlockFileResponse>* DriveProcedure::Stub::AsyncUnlockFileRaw(::grpc::ClientContext* context, const ::drive_protocol::request::UnlockFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

DriveProcedure::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::CreateFileRequest, ::drive_protocol::response::CreateFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::CreateFileRequest* req,
             ::drive_protocol::response::CreateFileResponse* resp) {
               return service->CreateFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::CloseFileRequest, ::drive_protocol::response::CloseFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::CloseFileRequest* req,
             ::drive_protocol::response::CloseFileResponse* resp) {
               return service->CloseFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::ReadFileRequest, ::drive_protocol::response::ReadFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::ReadFileRequest* req,
             ::drive_protocol::response::ReadFileResponse* resp) {
               return service->ReadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::WriteFileRequest, ::drive_protocol::response::WriteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::WriteFileRequest* req,
             ::drive_protocol::response::WriteFileResponse* resp) {
               return service->WriteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::FlushFileBufferRequest, ::drive_protocol::response::FlushFileBufferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::FlushFileBufferRequest* req,
             ::drive_protocol::response::FlushFileBufferResponse* resp) {
               return service->FlushFileBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::GetFileInformationRequest, ::drive_protocol::response::GetFileInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::GetFileInformationRequest* req,
             ::drive_protocol::response::GetFileInformationResponse* resp) {
               return service->GetFileInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::DeleteFileRequest, ::drive_protocol::response::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::DeleteFileRequest* req,
             ::drive_protocol::response::DeleteFileResponse* resp) {
               return service->DeleteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::DeleteDirectoryRequest, ::drive_protocol::response::DeleteDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::DeleteDirectoryRequest* req,
             ::drive_protocol::response::DeleteDirectoryResponse* resp) {
               return service->DeleteDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::MoveFileRequest, ::drive_protocol::response::MoveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::MoveFileRequest* req,
             ::drive_protocol::response::MoveFileResponse* resp) {
               return service->MoveFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::LockFileRequest, ::drive_protocol::response::LockFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::LockFileRequest* req,
             ::drive_protocol::response::LockFileResponse* resp) {
               return service->LockFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::SetEndOfFileRequest, ::drive_protocol::response::SetEndOfFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::SetEndOfFileRequest* req,
             ::drive_protocol::response::SetEndOfFileResponse* resp) {
               return service->SetEndOfFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::SetAllocationSizeRequest, ::drive_protocol::response::SetAllocationSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::SetAllocationSizeRequest* req,
             ::drive_protocol::response::SetAllocationSizeResponse* resp) {
               return service->SetAllocationSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::SetFileAttributesRequest, ::drive_protocol::response::SetFileAttributesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::SetFileAttributesRequest* req,
             ::drive_protocol::response::SetFileAttributesResponse* resp) {
               return service->SetFileAttributes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DriveProcedure_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DriveProcedure::Service, ::drive_protocol::request::UnlockFileRequest, ::drive_protocol::response::UnlockFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DriveProcedure::Service* service,
             ::grpc::ServerContext* ctx,
             const ::drive_protocol::request::UnlockFileRequest* req,
             ::drive_protocol::response::UnlockFileResponse* resp) {
               return service->UnlockFile(ctx, req, resp);
             }, this)));
}

DriveProcedure::Service::~Service() {
}

::grpc::Status DriveProcedure::Service::CreateFile(::grpc::ServerContext* context, const ::drive_protocol::request::CreateFileRequest* request, ::drive_protocol::response::CreateFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::CloseFile(::grpc::ServerContext* context, const ::drive_protocol::request::CloseFileRequest* request, ::drive_protocol::response::CloseFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::ReadFile(::grpc::ServerContext* context, const ::drive_protocol::request::ReadFileRequest* request, ::drive_protocol::response::ReadFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::WriteFile(::grpc::ServerContext* context, const ::drive_protocol::request::WriteFileRequest* request, ::drive_protocol::response::WriteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::FlushFileBuffer(::grpc::ServerContext* context, const ::drive_protocol::request::FlushFileBufferRequest* request, ::drive_protocol::response::FlushFileBufferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::GetFileInformation(::grpc::ServerContext* context, const ::drive_protocol::request::GetFileInformationRequest* request, ::drive_protocol::response::GetFileInformationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::DeleteFile(::grpc::ServerContext* context, const ::drive_protocol::request::DeleteFileRequest* request, ::drive_protocol::response::DeleteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::DeleteDirectory(::grpc::ServerContext* context, const ::drive_protocol::request::DeleteDirectoryRequest* request, ::drive_protocol::response::DeleteDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::MoveFile(::grpc::ServerContext* context, const ::drive_protocol::request::MoveFileRequest* request, ::drive_protocol::response::MoveFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::LockFile(::grpc::ServerContext* context, const ::drive_protocol::request::LockFileRequest* request, ::drive_protocol::response::LockFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::SetEndOfFile(::grpc::ServerContext* context, const ::drive_protocol::request::SetEndOfFileRequest* request, ::drive_protocol::response::SetEndOfFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::SetAllocationSize(::grpc::ServerContext* context, const ::drive_protocol::request::SetAllocationSizeRequest* request, ::drive_protocol::response::SetAllocationSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::SetFileAttributes(::grpc::ServerContext* context, const ::drive_protocol::request::SetFileAttributesRequest* request, ::drive_protocol::response::SetFileAttributesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DriveProcedure::Service::UnlockFile(::grpc::ServerContext* context, const ::drive_protocol::request::UnlockFileRequest* request, ::drive_protocol::response::UnlockFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace drive_protocol

